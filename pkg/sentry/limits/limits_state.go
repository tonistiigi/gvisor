// automatically generated by stateify.

package limits

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *LimitType) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *LimitType) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (LimitType)(y.(int)) })
}

func (x *Limit) beforeSave() {}
func (x *Limit) save(m state.Map) {
	x.beforeSave()
	m.Save("Cur", &x.Cur)
	m.Save("Max", &x.Max)
}

func (x *Limit) afterLoad() {}
func (x *Limit) load(m state.Map) {
	m.Load("Cur", &x.Cur)
	m.Load("Max", &x.Max)
}

func (x *LimitSet) beforeSave() {}
func (x *LimitSet) save(m state.Map) {
	x.beforeSave()
	m.Save("data", &x.data)
}

func (x *LimitSet) afterLoad() {}
func (x *LimitSet) load(m state.Map) {
	m.Load("data", &x.data)
}

func init() {
	state.Register("limits.LimitType", (*LimitType)(nil), state.Fns{Save: (*LimitType).save, Load: (*LimitType).load})
	state.Register("limits.Limit", (*Limit)(nil), state.Fns{Save: (*Limit).save, Load: (*Limit).load})
	state.Register("limits.LimitSet", (*LimitSet)(nil), state.Fns{Save: (*LimitSet).save, Load: (*LimitSet).load})
}
