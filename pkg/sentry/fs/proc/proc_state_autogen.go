// automatically generated by stateify.

package proc

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *cpuinfo) beforeSave() {}
func (x *cpuinfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("k", &x.k)
}

func (x *cpuinfo) afterLoad() {}
func (x *cpuinfo) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.Load("k", &x.k)
}

func (x *execArgFile) beforeSave() {}
func (x *execArgFile) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("arg", &x.arg)
	m.Save("t", &x.t)
}

func (x *execArgFile) afterLoad() {}
func (x *execArgFile) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.Load("arg", &x.arg)
	m.Load("t", &x.t)
}

func (x *fdDir) beforeSave() {}
func (x *fdDir) save(m state.Map) {
	x.beforeSave()
	m.Save("Dir", &x.Dir)
	m.Save("t", &x.t)
}

func (x *fdDir) afterLoad() {}
func (x *fdDir) load(m state.Map) {
	m.Load("Dir", &x.Dir)
	m.Load("t", &x.t)
}

func (x *fdInfo) beforeSave() {}
func (x *fdInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("File", &x.File)
	m.Save("file", &x.file)
	m.Save("flags", &x.flags)
	m.Save("fdFlags", &x.fdFlags)
}

func (x *fdInfo) afterLoad() {}
func (x *fdInfo) load(m state.Map) {
	m.Load("File", &x.File)
	m.Load("file", &x.file)
	m.Load("flags", &x.flags)
	m.Load("fdFlags", &x.fdFlags)
}

func (x *fdInfoDir) beforeSave() {}
func (x *fdInfoDir) save(m state.Map) {
	x.beforeSave()
	m.Save("Dir", &x.Dir)
	m.Save("t", &x.t)
}

func (x *fdInfoDir) afterLoad() {}
func (x *fdInfoDir) load(m state.Map) {
	m.Load("Dir", &x.Dir)
	m.Load("t", &x.t)
}

func (x *file) beforeSave() {}
func (x *file) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeOperations", &x.InodeOperations)
	m.Save("nodeType", &x.nodeType)
	m.Save("t", &x.t)
}

func (x *file) afterLoad() {}
func (x *file) load(m state.Map) {
	m.Load("InodeOperations", &x.InodeOperations)
	m.Load("nodeType", &x.nodeType)
	m.Load("t", &x.t)
}

func (x *filesystemsData) beforeSave() {}
func (x *filesystemsData) save(m state.Map) {
	x.beforeSave()
}

func (x *filesystemsData) afterLoad() {}
func (x *filesystemsData) load(m state.Map) {
}

func (x *filesystem) beforeSave() {}
func (x *filesystem) save(m state.Map) {
	x.beforeSave()
}

func (x *filesystem) afterLoad() {}
func (x *filesystem) load(m state.Map) {
}

func (x *loadavgData) beforeSave() {}
func (x *loadavgData) save(m state.Map) {
	x.beforeSave()
}

func (x *loadavgData) afterLoad() {}
func (x *loadavgData) load(m state.Map) {
}

func (x *meminfoData) beforeSave() {}
func (x *meminfoData) save(m state.Map) {
	x.beforeSave()
	m.Save("k", &x.k)
}

func (x *meminfoData) afterLoad() {}
func (x *meminfoData) load(m state.Map) {
	m.Load("k", &x.k)
}

func (x *mountInfoFile) beforeSave() {}
func (x *mountInfoFile) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
}

func (x *mountInfoFile) afterLoad() {}
func (x *mountInfoFile) load(m state.Map) {
	m.Load("t", &x.t)
}

func (x *mountsFile) beforeSave() {}
func (x *mountsFile) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
}

func (x *mountsFile) afterLoad() {}
func (x *mountsFile) load(m state.Map) {
	m.Load("t", &x.t)
}

func (x *ifinet6) beforeSave() {}
func (x *ifinet6) save(m state.Map) {
	x.beforeSave()
	m.Save("s", &x.s)
}

func (x *ifinet6) afterLoad() {}
func (x *ifinet6) load(m state.Map) {
	m.Load("s", &x.s)
}

func (x *netDev) beforeSave() {}
func (x *netDev) save(m state.Map) {
	x.beforeSave()
	m.Save("s", &x.s)
}

func (x *netDev) afterLoad() {}
func (x *netDev) load(m state.Map) {
	m.Load("s", &x.s)
}

func (x *proc) beforeSave() {}
func (x *proc) save(m state.Map) {
	x.beforeSave()
	m.Save("Dir", &x.Dir)
	m.Save("k", &x.k)
	m.Save("pidns", &x.pidns)
}

func (x *proc) afterLoad() {}
func (x *proc) load(m state.Map) {
	m.Load("Dir", &x.Dir)
	m.Load("k", &x.k)
	m.Load("pidns", &x.pidns)
}

func (x *stubProcFSFile) beforeSave() {}
func (x *stubProcFSFile) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("contents", &x.contents)
}

func (x *stubProcFSFile) afterLoad() {}
func (x *stubProcFSFile) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.Load("contents", &x.contents)
}

func (x *self) beforeSave() {}
func (x *self) save(m state.Map) {
	x.beforeSave()
	m.Save("Symlink", &x.Symlink)
	m.Save("pidns", &x.pidns)
}

func (x *self) afterLoad() {}
func (x *self) load(m state.Map) {
	m.Load("Symlink", &x.Symlink)
	m.Load("pidns", &x.pidns)
}

func (x *threadSelf) beforeSave() {}
func (x *threadSelf) save(m state.Map) {
	x.beforeSave()
	m.Save("Symlink", &x.Symlink)
	m.Save("pidns", &x.pidns)
}

func (x *threadSelf) afterLoad() {}
func (x *threadSelf) load(m state.Map) {
	m.Load("Symlink", &x.Symlink)
	m.Load("pidns", &x.pidns)
}

func (x *statData) beforeSave() {}
func (x *statData) save(m state.Map) {
	x.beforeSave()
	m.Save("k", &x.k)
}

func (x *statData) afterLoad() {}
func (x *statData) load(m state.Map) {
	m.Load("k", &x.k)
}

func (x *hostname) beforeSave() {}
func (x *hostname) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
}

func (x *hostname) afterLoad() {}
func (x *hostname) load(m state.Map) {
	m.Load("Entry", &x.Entry)
}

func (x *mmapMinAddrData) beforeSave() {}
func (x *mmapMinAddrData) save(m state.Map) {
	x.beforeSave()
	m.Save("k", &x.k)
}

func (x *mmapMinAddrData) afterLoad() {}
func (x *mmapMinAddrData) load(m state.Map) {
	m.Load("k", &x.k)
}

func (x *overcommitMemory) beforeSave() {}
func (x *overcommitMemory) save(m state.Map) {
	x.beforeSave()
}

func (x *overcommitMemory) afterLoad() {}
func (x *overcommitMemory) load(m state.Map) {
}

func (x *tcpMem) beforeSave() {}
func (x *tcpMem) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("s", &x.s)
	m.Save("size", &x.size)
	m.Save("dir", &x.dir)
}

func (x *tcpMem) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.LoadWait("s", &x.s)
	m.Load("size", &x.size)
	m.Load("dir", &x.dir)
	m.AfterLoad(x.afterLoad)
}

func (x *tcpSack) beforeSave() {}
func (x *tcpSack) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("s", &x.s)
	m.Save("enabled", &x.enabled)
}

func (x *tcpSack) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.LoadWait("s", &x.s)
	m.Load("enabled", &x.enabled)
	m.AfterLoad(x.afterLoad)
}

func (x *taskDir) beforeSave() {}
func (x *taskDir) save(m state.Map) {
	x.beforeSave()
	m.Save("Dir", &x.Dir)
	m.Save("t", &x.t)
}

func (x *taskDir) afterLoad() {}
func (x *taskDir) load(m state.Map) {
	m.Load("Dir", &x.Dir)
	m.Load("t", &x.t)
}

func (x *subtasks) beforeSave() {}
func (x *subtasks) save(m state.Map) {
	x.beforeSave()
	m.Save("Dir", &x.Dir)
	m.Save("t", &x.t)
	m.Save("pidns", &x.pidns)
}

func (x *subtasks) afterLoad() {}
func (x *subtasks) load(m state.Map) {
	m.Load("Dir", &x.Dir)
	m.Load("t", &x.t)
	m.Load("pidns", &x.pidns)
}

func (x *exe) beforeSave() {}
func (x *exe) save(m state.Map) {
	x.beforeSave()
	m.Save("Symlink", &x.Symlink)
	m.Save("t", &x.t)
}

func (x *exe) afterLoad() {}
func (x *exe) load(m state.Map) {
	m.Load("Symlink", &x.Symlink)
	m.Load("t", &x.t)
}

func (x *namespaceFile) beforeSave() {}
func (x *namespaceFile) save(m state.Map) {
	x.beforeSave()
	m.Save("Symlink", &x.Symlink)
	m.Save("t", &x.t)
}

func (x *namespaceFile) afterLoad() {}
func (x *namespaceFile) load(m state.Map) {
	m.Load("Symlink", &x.Symlink)
	m.Load("t", &x.t)
}

func (x *mapsData) beforeSave() {}
func (x *mapsData) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
}

func (x *mapsData) afterLoad() {}
func (x *mapsData) load(m state.Map) {
	m.Load("t", &x.t)
}

func (x *smapsData) beforeSave() {}
func (x *smapsData) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
}

func (x *smapsData) afterLoad() {}
func (x *smapsData) load(m state.Map) {
	m.Load("t", &x.t)
}

func (x *taskStatData) beforeSave() {}
func (x *taskStatData) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
	m.Save("tgstats", &x.tgstats)
	m.Save("pidns", &x.pidns)
}

func (x *taskStatData) afterLoad() {}
func (x *taskStatData) load(m state.Map) {
	m.Load("t", &x.t)
	m.Load("tgstats", &x.tgstats)
	m.Load("pidns", &x.pidns)
}

func (x *statmData) beforeSave() {}
func (x *statmData) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
}

func (x *statmData) afterLoad() {}
func (x *statmData) load(m state.Map) {
	m.Load("t", &x.t)
}

func (x *statusData) beforeSave() {}
func (x *statusData) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
	m.Save("pidns", &x.pidns)
}

func (x *statusData) afterLoad() {}
func (x *statusData) load(m state.Map) {
	m.Load("t", &x.t)
	m.Load("pidns", &x.pidns)
}

func (x *ioData) beforeSave() {}
func (x *ioData) save(m state.Map) {
	x.beforeSave()
	m.Save("ioUsage", &x.ioUsage)
}

func (x *ioData) afterLoad() {}
func (x *ioData) load(m state.Map) {
	m.Load("ioUsage", &x.ioUsage)
}

func (x *comm) beforeSave() {}
func (x *comm) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("t", &x.t)
}

func (x *comm) afterLoad() {}
func (x *comm) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.Load("t", &x.t)
}

func (x *auxvec) beforeSave() {}
func (x *auxvec) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("t", &x.t)
}

func (x *auxvec) afterLoad() {}
func (x *auxvec) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.Load("t", &x.t)
}

func (x *idMapSeqSource) beforeSave() {}
func (x *idMapSeqSource) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
	m.Save("gids", &x.gids)
}

func (x *idMapSeqSource) afterLoad() {}
func (x *idMapSeqSource) load(m state.Map) {
	m.Load("t", &x.t)
	m.Load("gids", &x.gids)
}

func (x *idMapSeqHandle) beforeSave() {}
func (x *idMapSeqHandle) save(m state.Map) {
	x.beforeSave()
	m.Save("value", &x.value)
}

func (x *idMapSeqHandle) afterLoad() {}
func (x *idMapSeqHandle) load(m state.Map) {
	m.Load("value", &x.value)
}

func (x *idMapSeqFile) beforeSave() {}
func (x *idMapSeqFile) save(m state.Map) {
	x.beforeSave()
	m.Save("SeqFile", &x.SeqFile)
}

func (x *idMapSeqFile) afterLoad() {}
func (x *idMapSeqFile) load(m state.Map) {
	m.Load("SeqFile", &x.SeqFile)
}

func (x *uptime) beforeSave() {}
func (x *uptime) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("startTime", &x.startTime)
}

func (x *uptime) afterLoad() {}
func (x *uptime) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.Load("startTime", &x.startTime)
}

func (x *versionData) beforeSave() {}
func (x *versionData) save(m state.Map) {
	x.beforeSave()
	m.Save("k", &x.k)
}

func (x *versionData) afterLoad() {}
func (x *versionData) load(m state.Map) {
	m.Load("k", &x.k)
}

func init() {
	state.Register("proc.cpuinfo", (*cpuinfo)(nil), state.Fns{Save: (*cpuinfo).save, Load: (*cpuinfo).load})
	state.Register("proc.execArgFile", (*execArgFile)(nil), state.Fns{Save: (*execArgFile).save, Load: (*execArgFile).load})
	state.Register("proc.fdDir", (*fdDir)(nil), state.Fns{Save: (*fdDir).save, Load: (*fdDir).load})
	state.Register("proc.fdInfo", (*fdInfo)(nil), state.Fns{Save: (*fdInfo).save, Load: (*fdInfo).load})
	state.Register("proc.fdInfoDir", (*fdInfoDir)(nil), state.Fns{Save: (*fdInfoDir).save, Load: (*fdInfoDir).load})
	state.Register("proc.file", (*file)(nil), state.Fns{Save: (*file).save, Load: (*file).load})
	state.Register("proc.filesystemsData", (*filesystemsData)(nil), state.Fns{Save: (*filesystemsData).save, Load: (*filesystemsData).load})
	state.Register("proc.filesystem", (*filesystem)(nil), state.Fns{Save: (*filesystem).save, Load: (*filesystem).load})
	state.Register("proc.loadavgData", (*loadavgData)(nil), state.Fns{Save: (*loadavgData).save, Load: (*loadavgData).load})
	state.Register("proc.meminfoData", (*meminfoData)(nil), state.Fns{Save: (*meminfoData).save, Load: (*meminfoData).load})
	state.Register("proc.mountInfoFile", (*mountInfoFile)(nil), state.Fns{Save: (*mountInfoFile).save, Load: (*mountInfoFile).load})
	state.Register("proc.mountsFile", (*mountsFile)(nil), state.Fns{Save: (*mountsFile).save, Load: (*mountsFile).load})
	state.Register("proc.ifinet6", (*ifinet6)(nil), state.Fns{Save: (*ifinet6).save, Load: (*ifinet6).load})
	state.Register("proc.netDev", (*netDev)(nil), state.Fns{Save: (*netDev).save, Load: (*netDev).load})
	state.Register("proc.proc", (*proc)(nil), state.Fns{Save: (*proc).save, Load: (*proc).load})
	state.Register("proc.stubProcFSFile", (*stubProcFSFile)(nil), state.Fns{Save: (*stubProcFSFile).save, Load: (*stubProcFSFile).load})
	state.Register("proc.self", (*self)(nil), state.Fns{Save: (*self).save, Load: (*self).load})
	state.Register("proc.threadSelf", (*threadSelf)(nil), state.Fns{Save: (*threadSelf).save, Load: (*threadSelf).load})
	state.Register("proc.statData", (*statData)(nil), state.Fns{Save: (*statData).save, Load: (*statData).load})
	state.Register("proc.hostname", (*hostname)(nil), state.Fns{Save: (*hostname).save, Load: (*hostname).load})
	state.Register("proc.mmapMinAddrData", (*mmapMinAddrData)(nil), state.Fns{Save: (*mmapMinAddrData).save, Load: (*mmapMinAddrData).load})
	state.Register("proc.overcommitMemory", (*overcommitMemory)(nil), state.Fns{Save: (*overcommitMemory).save, Load: (*overcommitMemory).load})
	state.Register("proc.tcpMem", (*tcpMem)(nil), state.Fns{Save: (*tcpMem).save, Load: (*tcpMem).load})
	state.Register("proc.tcpSack", (*tcpSack)(nil), state.Fns{Save: (*tcpSack).save, Load: (*tcpSack).load})
	state.Register("proc.taskDir", (*taskDir)(nil), state.Fns{Save: (*taskDir).save, Load: (*taskDir).load})
	state.Register("proc.subtasks", (*subtasks)(nil), state.Fns{Save: (*subtasks).save, Load: (*subtasks).load})
	state.Register("proc.exe", (*exe)(nil), state.Fns{Save: (*exe).save, Load: (*exe).load})
	state.Register("proc.namespaceFile", (*namespaceFile)(nil), state.Fns{Save: (*namespaceFile).save, Load: (*namespaceFile).load})
	state.Register("proc.mapsData", (*mapsData)(nil), state.Fns{Save: (*mapsData).save, Load: (*mapsData).load})
	state.Register("proc.smapsData", (*smapsData)(nil), state.Fns{Save: (*smapsData).save, Load: (*smapsData).load})
	state.Register("proc.taskStatData", (*taskStatData)(nil), state.Fns{Save: (*taskStatData).save, Load: (*taskStatData).load})
	state.Register("proc.statmData", (*statmData)(nil), state.Fns{Save: (*statmData).save, Load: (*statmData).load})
	state.Register("proc.statusData", (*statusData)(nil), state.Fns{Save: (*statusData).save, Load: (*statusData).load})
	state.Register("proc.ioData", (*ioData)(nil), state.Fns{Save: (*ioData).save, Load: (*ioData).load})
	state.Register("proc.comm", (*comm)(nil), state.Fns{Save: (*comm).save, Load: (*comm).load})
	state.Register("proc.auxvec", (*auxvec)(nil), state.Fns{Save: (*auxvec).save, Load: (*auxvec).load})
	state.Register("proc.idMapSeqSource", (*idMapSeqSource)(nil), state.Fns{Save: (*idMapSeqSource).save, Load: (*idMapSeqSource).load})
	state.Register("proc.idMapSeqHandle", (*idMapSeqHandle)(nil), state.Fns{Save: (*idMapSeqHandle).save, Load: (*idMapSeqHandle).load})
	state.Register("proc.idMapSeqFile", (*idMapSeqFile)(nil), state.Fns{Save: (*idMapSeqFile).save, Load: (*idMapSeqFile).load})
	state.Register("proc.uptime", (*uptime)(nil), state.Fns{Save: (*uptime).save, Load: (*uptime).load})
	state.Register("proc.versionData", (*versionData)(nil), state.Fns{Save: (*versionData).save, Load: (*versionData).load})
}
