// automatically generated by stateify.

package fs

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *InodeType) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *InodeType) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (InodeType)(y.(int)) })
}

func (x *StableAttr) beforeSave() {}
func (x *StableAttr) save(m state.Map) {
	x.beforeSave()
	m.Save("Type", &x.Type)
	m.Save("DeviceID", &x.DeviceID)
	m.Save("InodeID", &x.InodeID)
	m.Save("BlockSize", &x.BlockSize)
	m.Save("DeviceFileMajor", &x.DeviceFileMajor)
	m.Save("DeviceFileMinor", &x.DeviceFileMinor)
}

func (x *StableAttr) afterLoad() {}
func (x *StableAttr) load(m state.Map) {
	m.Load("Type", &x.Type)
	m.Load("DeviceID", &x.DeviceID)
	m.Load("InodeID", &x.InodeID)
	m.Load("BlockSize", &x.BlockSize)
	m.Load("DeviceFileMajor", &x.DeviceFileMajor)
	m.Load("DeviceFileMinor", &x.DeviceFileMinor)
}

func (x *UnstableAttr) beforeSave() {}
func (x *UnstableAttr) save(m state.Map) {
	x.beforeSave()
	m.Save("Size", &x.Size)
	m.Save("Usage", &x.Usage)
	m.Save("Perms", &x.Perms)
	m.Save("Owner", &x.Owner)
	m.Save("AccessTime", &x.AccessTime)
	m.Save("ModificationTime", &x.ModificationTime)
	m.Save("StatusChangeTime", &x.StatusChangeTime)
	m.Save("Links", &x.Links)
}

func (x *UnstableAttr) afterLoad() {}
func (x *UnstableAttr) load(m state.Map) {
	m.Load("Size", &x.Size)
	m.Load("Usage", &x.Usage)
	m.Load("Perms", &x.Perms)
	m.Load("Owner", &x.Owner)
	m.Load("AccessTime", &x.AccessTime)
	m.Load("ModificationTime", &x.ModificationTime)
	m.Load("StatusChangeTime", &x.StatusChangeTime)
	m.Load("Links", &x.Links)
}

func (x *AttrMask) beforeSave() {}
func (x *AttrMask) save(m state.Map) {
	x.beforeSave()
	m.Save("Type", &x.Type)
	m.Save("DeviceID", &x.DeviceID)
	m.Save("InodeID", &x.InodeID)
	m.Save("BlockSize", &x.BlockSize)
	m.Save("Size", &x.Size)
	m.Save("Usage", &x.Usage)
	m.Save("Perms", &x.Perms)
	m.Save("UID", &x.UID)
	m.Save("GID", &x.GID)
	m.Save("AccessTime", &x.AccessTime)
	m.Save("ModificationTime", &x.ModificationTime)
	m.Save("StatusChangeTime", &x.StatusChangeTime)
	m.Save("Links", &x.Links)
}

func (x *AttrMask) afterLoad() {}
func (x *AttrMask) load(m state.Map) {
	m.Load("Type", &x.Type)
	m.Load("DeviceID", &x.DeviceID)
	m.Load("InodeID", &x.InodeID)
	m.Load("BlockSize", &x.BlockSize)
	m.Load("Size", &x.Size)
	m.Load("Usage", &x.Usage)
	m.Load("Perms", &x.Perms)
	m.Load("UID", &x.UID)
	m.Load("GID", &x.GID)
	m.Load("AccessTime", &x.AccessTime)
	m.Load("ModificationTime", &x.ModificationTime)
	m.Load("StatusChangeTime", &x.StatusChangeTime)
	m.Load("Links", &x.Links)
}

func (x *PermMask) beforeSave() {}
func (x *PermMask) save(m state.Map) {
	x.beforeSave()
	m.Save("Read", &x.Read)
	m.Save("Write", &x.Write)
	m.Save("Execute", &x.Execute)
}

func (x *PermMask) afterLoad() {}
func (x *PermMask) load(m state.Map) {
	m.Load("Read", &x.Read)
	m.Load("Write", &x.Write)
	m.Load("Execute", &x.Execute)
}

func (x *FilePermissions) beforeSave() {}
func (x *FilePermissions) save(m state.Map) {
	x.beforeSave()
	m.Save("User", &x.User)
	m.Save("Group", &x.Group)
	m.Save("Other", &x.Other)
	m.Save("Sticky", &x.Sticky)
	m.Save("SetUID", &x.SetUID)
	m.Save("SetGID", &x.SetGID)
}

func (x *FilePermissions) afterLoad() {}
func (x *FilePermissions) load(m state.Map) {
	m.Load("User", &x.User)
	m.Load("Group", &x.Group)
	m.Load("Other", &x.Other)
	m.Load("Sticky", &x.Sticky)
	m.Load("SetUID", &x.SetUID)
	m.Load("SetGID", &x.SetGID)
}

func (x *FileOwner) beforeSave() {}
func (x *FileOwner) save(m state.Map) {
	x.beforeSave()
	m.Save("UID", &x.UID)
	m.Save("GID", &x.GID)
}

func (x *FileOwner) afterLoad() {}
func (x *FileOwner) load(m state.Map) {
	m.Load("UID", &x.UID)
	m.Load("GID", &x.GID)
}

func (x *DentAttr) beforeSave() {}
func (x *DentAttr) save(m state.Map) {
	x.beforeSave()
	m.Save("Type", &x.Type)
	m.Save("InodeID", &x.InodeID)
}

func (x *DentAttr) afterLoad() {}
func (x *DentAttr) load(m state.Map) {
	m.Load("Type", &x.Type)
	m.Load("InodeID", &x.InodeID)
}

func (x *CollectEntriesSerializer) beforeSave() {}
func (x *CollectEntriesSerializer) save(m state.Map) {
	x.beforeSave()
	m.Save("Entries", &x.Entries)
	m.Save("Order", &x.Order)
}

func (x *CollectEntriesSerializer) afterLoad() {}
func (x *CollectEntriesSerializer) load(m state.Map) {
	m.Load("Entries", &x.Entries)
	m.Load("Order", &x.Order)
}

func (x *DirCtx) beforeSave() {}
func (x *DirCtx) save(m state.Map) {
	x.beforeSave()
	m.Save("Serializer", &x.Serializer)
	m.Save("attrs", &x.attrs)
	m.Save("DirCursor", &x.DirCursor)
}

func (x *DirCtx) afterLoad() {}
func (x *DirCtx) load(m state.Map) {
	m.Load("Serializer", &x.Serializer)
	m.Load("attrs", &x.attrs)
	m.Load("DirCursor", &x.DirCursor)
}

func (x *SortedDentryMap) beforeSave() {}
func (x *SortedDentryMap) save(m state.Map) {
	x.beforeSave()
	m.Save("names", &x.names)
	m.Save("entries", &x.entries)
}

func (x *SortedDentryMap) afterLoad() {}
func (x *SortedDentryMap) load(m state.Map) {
	m.Load("names", &x.names)
	m.Load("entries", &x.entries)
}

func (x *globalDirentMap) beforeSave() {}
func (x *globalDirentMap) save(m state.Map) {
	x.beforeSave()
	m.Save("mu", &x.mu)
	m.Save("dirents", &x.dirents)
}

func (x *globalDirentMap) afterLoad() {}
func (x *globalDirentMap) load(m state.Map) {
	m.Load("mu", &x.mu)
	m.Load("dirents", &x.dirents)
}

func (x *Dirent) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("userVisible", &x.userVisible)
	m.Save("Inode", &x.Inode)
	m.Save("name", &x.name)
	m.Save("parent", &x.parent)
	m.Save("frozen", &x.frozen)
	m.Save("mounted", &x.mounted)
	m.Save("children", &x.children)
}

func (x *Dirent) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("userVisible", &x.userVisible)
	m.Load("Inode", &x.Inode)
	m.Load("name", &x.name)
	m.Load("parent", &x.parent)
	m.Load("frozen", &x.frozen)
	m.Load("mounted", &x.mounted)
	m.Load("children", &x.children)
	m.AfterLoad(x.afterLoad)
}

func (x *DirentCache) beforeSave() {}
func (x *DirentCache) save(m state.Map) {
	x.beforeSave()
	if !state.IsZeroValue(x.currentSize) { m.Failf("currentSize is %v, expected zero", x.currentSize) }
	if !state.IsZeroValue(x.list) { m.Failf("list is %v, expected zero", x.list) }
	m.Save("maxSize", &x.maxSize)
}

func (x *DirentCache) afterLoad() {}
func (x *DirentCache) load(m state.Map) {
	m.Load("maxSize", &x.maxSize)
}

func (x *direntList) beforeSave() {}
func (x *direntList) save(m state.Map) {
	x.beforeSave()
	m.Save("head", &x.head)
	m.Save("tail", &x.tail)
}

func (x *direntList) afterLoad() {}
func (x *direntList) load(m state.Map) {
	m.Load("head", &x.head)
	m.Load("tail", &x.tail)
}

func (x *direntEntry) beforeSave() {}
func (x *direntEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("next", &x.next)
	m.Save("prev", &x.prev)
}

func (x *direntEntry) afterLoad() {}
func (x *direntEntry) load(m state.Map) {
	m.Load("next", &x.next)
	m.Load("prev", &x.prev)
}

func (x *File) beforeSave() {}
func (x *File) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("UniqueID", &x.UniqueID)
	m.Save("Dirent", &x.Dirent)
	m.Save("flags", &x.flags)
	m.Save("async", &x.async)
	m.Save("FileOperations", &x.FileOperations)
	m.Save("offset", &x.offset)
}

func (x *File) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("UniqueID", &x.UniqueID)
	m.Load("Dirent", &x.Dirent)
	m.Load("flags", &x.flags)
	m.Load("async", &x.async)
	m.Load("FileOperations", &x.FileOperations)
	m.Load("offset", &x.offset)
	m.AfterLoad(x.afterLoad)
}

func (x *FileReader) beforeSave() {}
func (x *FileReader) save(m state.Map) {
	x.beforeSave()
	m.Save("Ctx", &x.Ctx)
	m.Save("File", &x.File)
}

func (x *FileReader) afterLoad() {}
func (x *FileReader) load(m state.Map) {
	m.Load("Ctx", &x.Ctx)
	m.Load("File", &x.File)
}

func (x *FileWriter) beforeSave() {}
func (x *FileWriter) save(m state.Map) {
	x.beforeSave()
	m.Save("Ctx", &x.Ctx)
	m.Save("File", &x.File)
}

func (x *FileWriter) afterLoad() {}
func (x *FileWriter) load(m state.Map) {
	m.Load("Ctx", &x.Ctx)
	m.Load("File", &x.File)
}

func (x *overlayFileOperations) beforeSave() {}
func (x *overlayFileOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("upper", &x.upper)
	m.Save("lower", &x.lower)
	m.Save("dirCursor", &x.dirCursor)
	m.Save("dirCache", &x.dirCache)
}

func (x *overlayFileOperations) afterLoad() {}
func (x *overlayFileOperations) load(m state.Map) {
	m.Load("upper", &x.upper)
	m.Load("lower", &x.lower)
	m.Load("dirCursor", &x.dirCursor)
	m.Load("dirCache", &x.dirCache)
}

func (x *FilesystemFlags) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *FilesystemFlags) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (FilesystemFlags)(y.(int)) })
}

func (x *MountSourceFlags) beforeSave() {}
func (x *MountSourceFlags) save(m state.Map) {
	x.beforeSave()
	m.Save("ReadOnly", &x.ReadOnly)
	m.Save("NoAtime", &x.NoAtime)
	m.Save("ForcePageCache", &x.ForcePageCache)
}

func (x *MountSourceFlags) afterLoad() {}
func (x *MountSourceFlags) load(m state.Map) {
	m.Load("ReadOnly", &x.ReadOnly)
	m.Load("NoAtime", &x.NoAtime)
	m.Load("ForcePageCache", &x.ForcePageCache)
}

func (x *FileFlags) beforeSave() {}
func (x *FileFlags) save(m state.Map) {
	x.beforeSave()
	m.Save("Direct", &x.Direct)
	m.Save("NonBlocking", &x.NonBlocking)
	m.Save("Sync", &x.Sync)
	m.Save("Append", &x.Append)
	m.Save("Read", &x.Read)
	m.Save("Write", &x.Write)
	m.Save("Pread", &x.Pread)
	m.Save("Pwrite", &x.Pwrite)
	m.Save("Directory", &x.Directory)
	m.Save("Async", &x.Async)
}

func (x *FileFlags) afterLoad() {}
func (x *FileFlags) load(m state.Map) {
	m.Load("Direct", &x.Direct)
	m.Load("NonBlocking", &x.NonBlocking)
	m.Load("Sync", &x.Sync)
	m.Load("Append", &x.Append)
	m.Load("Read", &x.Read)
	m.Load("Write", &x.Write)
	m.Load("Pread", &x.Pread)
	m.Load("Pwrite", &x.Pwrite)
	m.Load("Directory", &x.Directory)
	m.Load("Async", &x.Async)
}

func (x *SettableFileFlags) beforeSave() {}
func (x *SettableFileFlags) save(m state.Map) {
	x.beforeSave()
	m.Save("Direct", &x.Direct)
	m.Save("NonBlocking", &x.NonBlocking)
	m.Save("Append", &x.Append)
	m.Save("Async", &x.Async)
}

func (x *SettableFileFlags) afterLoad() {}
func (x *SettableFileFlags) load(m state.Map) {
	m.Load("Direct", &x.Direct)
	m.Load("NonBlocking", &x.NonBlocking)
	m.Load("Append", &x.Append)
	m.Load("Async", &x.Async)
}

func (x *Inode) beforeSave() {}
func (x *Inode) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("InodeOperations", &x.InodeOperations)
	m.Save("StableAttr", &x.StableAttr)
	m.Save("LockCtx", &x.LockCtx)
	m.Save("Watches", &x.Watches)
	m.Save("MountSource", &x.MountSource)
	m.Save("overlay", &x.overlay)
}

func (x *Inode) afterLoad() {}
func (x *Inode) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("InodeOperations", &x.InodeOperations)
	m.Load("StableAttr", &x.StableAttr)
	m.Load("LockCtx", &x.LockCtx)
	m.Load("Watches", &x.Watches)
	m.Load("MountSource", &x.MountSource)
	m.Load("overlay", &x.overlay)
}

func (x *LockCtx) beforeSave() {}
func (x *LockCtx) save(m state.Map) {
	x.beforeSave()
	m.Save("Posix", &x.Posix)
	m.Save("BSD", &x.BSD)
}

func (x *LockCtx) afterLoad() {}
func (x *LockCtx) load(m state.Map) {
	m.Load("Posix", &x.Posix)
	m.Load("BSD", &x.BSD)
}

func (x *Watches) beforeSave() {}
func (x *Watches) save(m state.Map) {
	x.beforeSave()
	m.Save("ws", &x.ws)
	m.Save("unlinked", &x.unlinked)
}

func (x *Watches) afterLoad() {}
func (x *Watches) load(m state.Map) {
	m.Load("ws", &x.ws)
	m.Load("unlinked", &x.unlinked)
}

func (x *TimeSpec) beforeSave() {}
func (x *TimeSpec) save(m state.Map) {
	x.beforeSave()
	m.Save("ATime", &x.ATime)
	m.Save("ATimeOmit", &x.ATimeOmit)
	m.Save("ATimeSetSystemTime", &x.ATimeSetSystemTime)
	m.Save("MTime", &x.MTime)
	m.Save("MTimeOmit", &x.MTimeOmit)
	m.Save("MTimeSetSystemTime", &x.MTimeSetSystemTime)
}

func (x *TimeSpec) afterLoad() {}
func (x *TimeSpec) load(m state.Map) {
	m.Load("ATime", &x.ATime)
	m.Load("ATimeOmit", &x.ATimeOmit)
	m.Load("ATimeSetSystemTime", &x.ATimeSetSystemTime)
	m.Load("MTime", &x.MTime)
	m.Load("MTimeOmit", &x.MTimeOmit)
	m.Load("MTimeSetSystemTime", &x.MTimeSetSystemTime)
}

func (x *Inotify) beforeSave() {}
func (x *Inotify) save(m state.Map) {
	x.beforeSave()
	m.Save("id", &x.id)
	m.Save("events", &x.events)
	m.Save("scratch", &x.scratch)
	m.Save("nextWatch", &x.nextWatch)
	m.Save("watches", &x.watches)
}

func (x *Inotify) afterLoad() {}
func (x *Inotify) load(m state.Map) {
	m.Load("id", &x.id)
	m.Load("events", &x.events)
	m.Load("scratch", &x.scratch)
	m.Load("nextWatch", &x.nextWatch)
	m.Load("watches", &x.watches)
}

func (x *Event) beforeSave() {}
func (x *Event) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("wd", &x.wd)
	m.Save("mask", &x.mask)
	m.Save("cookie", &x.cookie)
	m.Save("len", &x.len)
	m.Save("name", &x.name)
}

func (x *Event) afterLoad() {}
func (x *Event) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.Load("wd", &x.wd)
	m.Load("mask", &x.mask)
	m.Load("cookie", &x.cookie)
	m.Load("len", &x.len)
	m.Load("name", &x.name)
}

func (x *Watch) beforeSave() {}
func (x *Watch) save(m state.Map) {
	x.beforeSave()
	m.Save("owner", &x.owner)
	m.Save("wd", &x.wd)
	m.Save("target", &x.target)
	m.Save("unpinned", &x.unpinned)
	m.Save("mask", &x.mask)
	m.Save("pins", &x.pins)
}

func (x *Watch) afterLoad() {}
func (x *Watch) load(m state.Map) {
	m.Load("owner", &x.owner)
	m.Load("wd", &x.wd)
	m.Load("target", &x.target)
	m.Load("unpinned", &x.unpinned)
	m.Load("mask", &x.mask)
	m.Load("pins", &x.pins)
}

func (x *MockInodeOperations) beforeSave() {}
func (x *MockInodeOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeOperations", &x.InodeOperations)
	m.Save("UAttr", &x.UAttr)
	m.Save("createCalled", &x.createCalled)
	m.Save("createDirectoryCalled", &x.createDirectoryCalled)
	m.Save("createLinkCalled", &x.createLinkCalled)
	m.Save("renameCalled", &x.renameCalled)
	m.Save("walkCalled", &x.walkCalled)
}

func (x *MockInodeOperations) afterLoad() {}
func (x *MockInodeOperations) load(m state.Map) {
	m.Load("InodeOperations", &x.InodeOperations)
	m.Load("UAttr", &x.UAttr)
	m.Load("createCalled", &x.createCalled)
	m.Load("createDirectoryCalled", &x.createDirectoryCalled)
	m.Load("createLinkCalled", &x.createLinkCalled)
	m.Load("renameCalled", &x.renameCalled)
	m.Load("walkCalled", &x.walkCalled)
}

func (x *MockMountSourceOps) beforeSave() {}
func (x *MockMountSourceOps) save(m state.Map) {
	x.beforeSave()
	m.Save("MountSourceOperations", &x.MountSourceOperations)
	m.Save("keep", &x.keep)
	m.Save("revalidate", &x.revalidate)
}

func (x *MockMountSourceOps) afterLoad() {}
func (x *MockMountSourceOps) load(m state.Map) {
	m.Load("MountSourceOperations", &x.MountSourceOperations)
	m.Load("keep", &x.keep)
	m.Load("revalidate", &x.revalidate)
}

func (x *MountSource) beforeSave() {}
func (x *MountSource) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("MountSourceOperations", &x.MountSourceOperations)
	m.Save("Filesystem", &x.Filesystem)
	m.Save("Flags", &x.Flags)
	m.Save("direntRefs", &x.direntRefs)
	m.Save("id", &x.id)
	m.Save("root", &x.root)
	m.Save("parent", &x.parent)
	m.Save("children", &x.children)
}

func (x *MountSource) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("MountSourceOperations", &x.MountSourceOperations)
	m.Load("Filesystem", &x.Filesystem)
	m.Load("Flags", &x.Flags)
	m.Load("direntRefs", &x.direntRefs)
	m.Load("id", &x.id)
	m.Load("root", &x.root)
	m.Load("parent", &x.parent)
	m.Load("children", &x.children)
	m.AfterLoad(x.afterLoad)
}

func (x *SimpleMountSourceOperations) beforeSave() {}
func (x *SimpleMountSourceOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("keep", &x.keep)
}

func (x *SimpleMountSourceOperations) afterLoad() {}
func (x *SimpleMountSourceOperations) load(m state.Map) {
	m.Load("keep", &x.keep)
}

func (x *Info) beforeSave() {}
func (x *Info) save(m state.Map) {
	x.beforeSave()
	m.Save("Type", &x.Type)
	m.Save("TotalBlocks", &x.TotalBlocks)
	m.Save("FreeBlocks", &x.FreeBlocks)
	m.Save("TotalFiles", &x.TotalFiles)
	m.Save("FreeFiles", &x.FreeFiles)
}

func (x *Info) afterLoad() {}
func (x *Info) load(m state.Map) {
	m.Load("Type", &x.Type)
	m.Load("TotalBlocks", &x.TotalBlocks)
	m.Load("FreeBlocks", &x.FreeBlocks)
	m.Load("TotalFiles", &x.TotalFiles)
	m.Load("FreeFiles", &x.FreeFiles)
}

func (x *overlayMountSourceOperations) beforeSave() {}
func (x *overlayMountSourceOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("upper", &x.upper)
	m.Save("lower", &x.lower)
}

func (x *overlayMountSourceOperations) afterLoad() {}
func (x *overlayMountSourceOperations) load(m state.Map) {
	m.Load("upper", &x.upper)
	m.Load("lower", &x.lower)
}

func (x *overlayFilesystem) beforeSave() {}
func (x *overlayFilesystem) save(m state.Map) {
	x.beforeSave()
}

func (x *overlayFilesystem) afterLoad() {}
func (x *overlayFilesystem) load(m state.Map) {
}

func (x *MountNamespace) beforeSave() {}
func (x *MountNamespace) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("userns", &x.userns)
	m.Save("root", &x.root)
	m.Save("mounts", &x.mounts)
	m.Save("mountID", &x.mountID)
}

func (x *MountNamespace) afterLoad() {}
func (x *MountNamespace) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("userns", &x.userns)
	m.Load("root", &x.root)
	m.Load("mounts", &x.mounts)
	m.Load("mountID", &x.mountID)
}

func (x *overlayEntry) beforeSave() {}
func (x *overlayEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("lowerExists", &x.lowerExists)
	m.Save("lower", &x.lower)
	m.Save("mappings", &x.mappings)
	m.Save("upper", &x.upper)
}

func (x *overlayEntry) afterLoad() {}
func (x *overlayEntry) load(m state.Map) {
	m.Load("lowerExists", &x.lowerExists)
	m.Load("lower", &x.lower)
	m.Load("mappings", &x.mappings)
	m.Load("upper", &x.upper)
}

func init() {
	state.Register("fs.InodeType", (*InodeType)(nil), state.Fns{Save: (*InodeType).save, Load: (*InodeType).load})
	state.Register("fs.StableAttr", (*StableAttr)(nil), state.Fns{Save: (*StableAttr).save, Load: (*StableAttr).load})
	state.Register("fs.UnstableAttr", (*UnstableAttr)(nil), state.Fns{Save: (*UnstableAttr).save, Load: (*UnstableAttr).load})
	state.Register("fs.AttrMask", (*AttrMask)(nil), state.Fns{Save: (*AttrMask).save, Load: (*AttrMask).load})
	state.Register("fs.PermMask", (*PermMask)(nil), state.Fns{Save: (*PermMask).save, Load: (*PermMask).load})
	state.Register("fs.FilePermissions", (*FilePermissions)(nil), state.Fns{Save: (*FilePermissions).save, Load: (*FilePermissions).load})
	state.Register("fs.FileOwner", (*FileOwner)(nil), state.Fns{Save: (*FileOwner).save, Load: (*FileOwner).load})
	state.Register("fs.DentAttr", (*DentAttr)(nil), state.Fns{Save: (*DentAttr).save, Load: (*DentAttr).load})
	state.Register("fs.CollectEntriesSerializer", (*CollectEntriesSerializer)(nil), state.Fns{Save: (*CollectEntriesSerializer).save, Load: (*CollectEntriesSerializer).load})
	state.Register("fs.DirCtx", (*DirCtx)(nil), state.Fns{Save: (*DirCtx).save, Load: (*DirCtx).load})
	state.Register("fs.SortedDentryMap", (*SortedDentryMap)(nil), state.Fns{Save: (*SortedDentryMap).save, Load: (*SortedDentryMap).load})
	state.Register("fs.globalDirentMap", (*globalDirentMap)(nil), state.Fns{Save: (*globalDirentMap).save, Load: (*globalDirentMap).load})
	state.Register("fs.Dirent", (*Dirent)(nil), state.Fns{Save: (*Dirent).save, Load: (*Dirent).load})
	state.Register("fs.DirentCache", (*DirentCache)(nil), state.Fns{Save: (*DirentCache).save, Load: (*DirentCache).load})
	state.Register("fs.direntList", (*direntList)(nil), state.Fns{Save: (*direntList).save, Load: (*direntList).load})
	state.Register("fs.direntEntry", (*direntEntry)(nil), state.Fns{Save: (*direntEntry).save, Load: (*direntEntry).load})
	state.Register("fs.File", (*File)(nil), state.Fns{Save: (*File).save, Load: (*File).load})
	state.Register("fs.FileReader", (*FileReader)(nil), state.Fns{Save: (*FileReader).save, Load: (*FileReader).load})
	state.Register("fs.FileWriter", (*FileWriter)(nil), state.Fns{Save: (*FileWriter).save, Load: (*FileWriter).load})
	state.Register("fs.overlayFileOperations", (*overlayFileOperations)(nil), state.Fns{Save: (*overlayFileOperations).save, Load: (*overlayFileOperations).load})
	state.Register("fs.FilesystemFlags", (*FilesystemFlags)(nil), state.Fns{Save: (*FilesystemFlags).save, Load: (*FilesystemFlags).load})
	state.Register("fs.MountSourceFlags", (*MountSourceFlags)(nil), state.Fns{Save: (*MountSourceFlags).save, Load: (*MountSourceFlags).load})
	state.Register("fs.FileFlags", (*FileFlags)(nil), state.Fns{Save: (*FileFlags).save, Load: (*FileFlags).load})
	state.Register("fs.SettableFileFlags", (*SettableFileFlags)(nil), state.Fns{Save: (*SettableFileFlags).save, Load: (*SettableFileFlags).load})
	state.Register("fs.Inode", (*Inode)(nil), state.Fns{Save: (*Inode).save, Load: (*Inode).load})
	state.Register("fs.LockCtx", (*LockCtx)(nil), state.Fns{Save: (*LockCtx).save, Load: (*LockCtx).load})
	state.Register("fs.Watches", (*Watches)(nil), state.Fns{Save: (*Watches).save, Load: (*Watches).load})
	state.Register("fs.TimeSpec", (*TimeSpec)(nil), state.Fns{Save: (*TimeSpec).save, Load: (*TimeSpec).load})
	state.Register("fs.Inotify", (*Inotify)(nil), state.Fns{Save: (*Inotify).save, Load: (*Inotify).load})
	state.Register("fs.Event", (*Event)(nil), state.Fns{Save: (*Event).save, Load: (*Event).load})
	state.Register("fs.Watch", (*Watch)(nil), state.Fns{Save: (*Watch).save, Load: (*Watch).load})
	state.Register("fs.MockInodeOperations", (*MockInodeOperations)(nil), state.Fns{Save: (*MockInodeOperations).save, Load: (*MockInodeOperations).load})
	state.Register("fs.MockMountSourceOps", (*MockMountSourceOps)(nil), state.Fns{Save: (*MockMountSourceOps).save, Load: (*MockMountSourceOps).load})
	state.Register("fs.MountSource", (*MountSource)(nil), state.Fns{Save: (*MountSource).save, Load: (*MountSource).load})
	state.Register("fs.SimpleMountSourceOperations", (*SimpleMountSourceOperations)(nil), state.Fns{Save: (*SimpleMountSourceOperations).save, Load: (*SimpleMountSourceOperations).load})
	state.Register("fs.Info", (*Info)(nil), state.Fns{Save: (*Info).save, Load: (*Info).load})
	state.Register("fs.overlayMountSourceOperations", (*overlayMountSourceOperations)(nil), state.Fns{Save: (*overlayMountSourceOperations).save, Load: (*overlayMountSourceOperations).load})
	state.Register("fs.overlayFilesystem", (*overlayFilesystem)(nil), state.Fns{Save: (*overlayFilesystem).save, Load: (*overlayFilesystem).load})
	state.Register("fs.MountNamespace", (*MountNamespace)(nil), state.Fns{Save: (*MountNamespace).save, Load: (*MountNamespace).load})
	state.Register("fs.overlayEntry", (*overlayEntry)(nil), state.Fns{Save: (*overlayEntry).save, Load: (*overlayEntry).load})
}
