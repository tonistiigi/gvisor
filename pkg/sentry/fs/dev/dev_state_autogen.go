// automatically generated by stateify.

package dev

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *filesystem) beforeSave() {}
func (x *filesystem) save(m state.Map) {
	x.beforeSave()
}

func (x *filesystem) afterLoad() {}
func (x *filesystem) load(m state.Map) {
}

func (x *fullDevice) beforeSave() {}
func (x *fullDevice) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *fullDevice) afterLoad() {}
func (x *fullDevice) load(m state.Map) {
	m.Load("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *fullFileOperations) beforeSave() {}
func (x *fullFileOperations) save(m state.Map) {
	x.beforeSave()
}

func (x *fullFileOperations) afterLoad() {}
func (x *fullFileOperations) load(m state.Map) {
}

func (x *nullDevice) beforeSave() {}
func (x *nullDevice) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *nullDevice) afterLoad() {}
func (x *nullDevice) load(m state.Map) {
	m.Load("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *nullFileOperations) beforeSave() {}
func (x *nullFileOperations) save(m state.Map) {
	x.beforeSave()
}

func (x *nullFileOperations) afterLoad() {}
func (x *nullFileOperations) load(m state.Map) {
}

func (x *zeroDevice) beforeSave() {}
func (x *zeroDevice) save(m state.Map) {
	x.beforeSave()
	m.Save("nullDevice", &x.nullDevice)
}

func (x *zeroDevice) afterLoad() {}
func (x *zeroDevice) load(m state.Map) {
	m.Load("nullDevice", &x.nullDevice)
}

func (x *zeroFileOperations) beforeSave() {}
func (x *zeroFileOperations) save(m state.Map) {
	x.beforeSave()
}

func (x *zeroFileOperations) afterLoad() {}
func (x *zeroFileOperations) load(m state.Map) {
}

func (x *randomDevice) beforeSave() {}
func (x *randomDevice) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *randomDevice) afterLoad() {}
func (x *randomDevice) load(m state.Map) {
	m.Load("InodeSimpleAttributes", &x.InodeSimpleAttributes)
}

func (x *randomFileOperations) beforeSave() {}
func (x *randomFileOperations) save(m state.Map) {
	x.beforeSave()
}

func (x *randomFileOperations) afterLoad() {}
func (x *randomFileOperations) load(m state.Map) {
}

func init() {
	state.Register("dev.filesystem", (*filesystem)(nil), state.Fns{Save: (*filesystem).save, Load: (*filesystem).load})
	state.Register("dev.fullDevice", (*fullDevice)(nil), state.Fns{Save: (*fullDevice).save, Load: (*fullDevice).load})
	state.Register("dev.fullFileOperations", (*fullFileOperations)(nil), state.Fns{Save: (*fullFileOperations).save, Load: (*fullFileOperations).load})
	state.Register("dev.nullDevice", (*nullDevice)(nil), state.Fns{Save: (*nullDevice).save, Load: (*nullDevice).load})
	state.Register("dev.nullFileOperations", (*nullFileOperations)(nil), state.Fns{Save: (*nullFileOperations).save, Load: (*nullFileOperations).load})
	state.Register("dev.zeroDevice", (*zeroDevice)(nil), state.Fns{Save: (*zeroDevice).save, Load: (*zeroDevice).load})
	state.Register("dev.zeroFileOperations", (*zeroFileOperations)(nil), state.Fns{Save: (*zeroFileOperations).save, Load: (*zeroFileOperations).load})
	state.Register("dev.randomDevice", (*randomDevice)(nil), state.Fns{Save: (*randomDevice).save, Load: (*randomDevice).load})
	state.Register("dev.randomFileOperations", (*randomFileOperations)(nil), state.Fns{Save: (*randomFileOperations).save, Load: (*randomFileOperations).load})
}
