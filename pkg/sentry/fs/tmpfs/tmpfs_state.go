// automatically generated by stateify.

package tmpfs

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *regularFileOperations) beforeSave() {}
func (x *regularFileOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("iops", &x.iops)
}

func (x *regularFileOperations) afterLoad() {}
func (x *regularFileOperations) load(m state.Map) {
	m.Load("iops", &x.iops)
}

func (x *Filesystem) beforeSave() {}
func (x *Filesystem) save(m state.Map) {
	x.beforeSave()
}

func (x *Filesystem) afterLoad() {}
func (x *Filesystem) load(m state.Map) {
}

func (x *fileInodeOperations) beforeSave() {}
func (x *fileInodeOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("platform", &x.platform)
	m.Save("memUsage", &x.memUsage)
	m.Save("attr", &x.attr)
	m.Save("mappings", &x.mappings)
	m.Save("data", &x.data)
}

func (x *fileInodeOperations) afterLoad() {}
func (x *fileInodeOperations) load(m state.Map) {
	m.Load("platform", &x.platform)
	m.Load("memUsage", &x.memUsage)
	m.Load("attr", &x.attr)
	m.Load("mappings", &x.mappings)
	m.Load("data", &x.data)
}

func (x *fileReadWriter) beforeSave() {}
func (x *fileReadWriter) save(m state.Map) {
	x.beforeSave()
	m.Save("f", &x.f)
	m.Save("offset", &x.offset)
}

func (x *fileReadWriter) afterLoad() {}
func (x *fileReadWriter) load(m state.Map) {
	m.Load("f", &x.f)
	m.Load("offset", &x.offset)
}

func (x *Dir) beforeSave() {}
func (x *Dir) save(m state.Map) {
	x.beforeSave()
	m.Save("Dir", &x.Dir)
	m.Save("platform", &x.platform)
}

func (x *Dir) load(m state.Map) {
	m.Load("Dir", &x.Dir)
	m.Load("platform", &x.platform)
	m.AfterLoad(x.afterLoad)
}

func (x *Symlink) beforeSave() {}
func (x *Symlink) save(m state.Map) {
	x.beforeSave()
	m.Save("Symlink", &x.Symlink)
}

func (x *Symlink) afterLoad() {}
func (x *Symlink) load(m state.Map) {
	m.Load("Symlink", &x.Symlink)
}

func (x *Socket) beforeSave() {}
func (x *Socket) save(m state.Map) {
	x.beforeSave()
	m.Save("Socket", &x.Socket)
}

func (x *Socket) afterLoad() {}
func (x *Socket) load(m state.Map) {
	m.Load("Socket", &x.Socket)
}

func (x *Fifo) beforeSave() {}
func (x *Fifo) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
}

func (x *Fifo) afterLoad() {}
func (x *Fifo) load(m state.Map) {
	m.Load("Entry", &x.Entry)
}

func init() {
	state.Register("tmpfs.regularFileOperations", (*regularFileOperations)(nil), state.Fns{Save: (*regularFileOperations).save, Load: (*regularFileOperations).load})
	state.Register("tmpfs.Filesystem", (*Filesystem)(nil), state.Fns{Save: (*Filesystem).save, Load: (*Filesystem).load})
	state.Register("tmpfs.fileInodeOperations", (*fileInodeOperations)(nil), state.Fns{Save: (*fileInodeOperations).save, Load: (*fileInodeOperations).load})
	state.Register("tmpfs.fileReadWriter", (*fileReadWriter)(nil), state.Fns{Save: (*fileReadWriter).save, Load: (*fileReadWriter).load})
	state.Register("tmpfs.Dir", (*Dir)(nil), state.Fns{Save: (*Dir).save, Load: (*Dir).load})
	state.Register("tmpfs.Symlink", (*Symlink)(nil), state.Fns{Save: (*Symlink).save, Load: (*Symlink).load})
	state.Register("tmpfs.Socket", (*Socket)(nil), state.Fns{Save: (*Socket).save, Load: (*Socket).load})
	state.Register("tmpfs.Fifo", (*Fifo)(nil), state.Fns{Save: (*Fifo).save, Load: (*Fifo).load})
}
