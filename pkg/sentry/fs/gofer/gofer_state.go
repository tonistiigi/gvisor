// automatically generated by stateify.

package gofer

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *fileOperations) beforeSave() {}
func (x *fileOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("inodeOperations", &x.inodeOperations)
	m.Save("dirCursor", &x.dirCursor)
	m.Save("flags", &x.flags)
}

func (x *fileOperations) load(m state.Map) {
	m.LoadWait("inodeOperations", &x.inodeOperations)
	m.Load("dirCursor", &x.dirCursor)
	m.LoadWait("flags", &x.flags)
	m.AfterLoad(x.afterLoad)
}

func (x *cachePolicy) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *cachePolicy) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (cachePolicy)(y.(int)) })
}

func (x *filesystem) beforeSave() {}
func (x *filesystem) save(m state.Map) {
	x.beforeSave()
}

func (x *filesystem) afterLoad() {}
func (x *filesystem) load(m state.Map) {
}

func (x *opts) beforeSave() {}
func (x *opts) save(m state.Map) {
	x.beforeSave()
	m.Save("fd", &x.fd)
	m.Save("aname", &x.aname)
	m.Save("policy", &x.policy)
	m.Save("msize", &x.msize)
	m.Save("version", &x.version)
	m.Save("privateunixsocket", &x.privateunixsocket)
}

func (x *opts) afterLoad() {}
func (x *opts) load(m state.Map) {
	m.Load("fd", &x.fd)
	m.Load("aname", &x.aname)
	m.Load("policy", &x.policy)
	m.Load("msize", &x.msize)
	m.Load("version", &x.version)
	m.Load("privateunixsocket", &x.privateunixsocket)
}

func (x *inodeOperations) beforeSave() {}
func (x *inodeOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("fileState", &x.fileState)
	m.Save("cachingInodeOps", &x.cachingInodeOps)
}

func (x *inodeOperations) afterLoad() {}
func (x *inodeOperations) load(m state.Map) {
	m.LoadWait("fileState", &x.fileState)
	m.Load("cachingInodeOps", &x.cachingInodeOps)
}

func (x *inodeFileState) save(m state.Map) {
	x.beforeSave()
	var loading struct{} = x.saveLoading()
	m.SaveValue("loading", loading)
	m.Save("s", &x.s)
	m.Save("sattr", &x.sattr)
	m.Save("writebackRW", &x.writebackRW)
	m.Save("savedUAttr", &x.savedUAttr)
}

func (x *inodeFileState) load(m state.Map) {
	m.LoadWait("s", &x.s)
	m.LoadWait("sattr", &x.sattr)
	m.Load("writebackRW", &x.writebackRW)
	m.Load("savedUAttr", &x.savedUAttr)
	m.LoadValue("loading", new(struct{}), func(y interface{}) { x.loadLoading(y.(struct{})) })
	m.AfterLoad(x.afterLoad)
}

func (x *dummyClock) beforeSave() {}
func (x *dummyClock) save(m state.Map) {
	x.beforeSave()
	m.Save("Clock", &x.Clock)
}

func (x *dummyClock) afterLoad() {}
func (x *dummyClock) load(m state.Map) {
	m.Load("Clock", &x.Clock)
}

func (x *dummyClockContext) beforeSave() {}
func (x *dummyClockContext) save(m state.Map) {
	x.beforeSave()
	m.Save("Context", &x.Context)
}

func (x *dummyClockContext) afterLoad() {}
func (x *dummyClockContext) load(m state.Map) {
	m.Load("Context", &x.Context)
}

func (x *endpointMap) beforeSave() {}
func (x *endpointMap) save(m state.Map) {
	x.beforeSave()
	m.Save("mu", &x.mu)
	m.Save("m", &x.m)
}

func (x *endpointMap) afterLoad() {}
func (x *endpointMap) load(m state.Map) {
	m.Load("mu", &x.mu)
	m.Load("m", &x.m)
}

func (x *session) beforeSave() {}
func (x *session) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("msize", &x.msize)
	m.Save("version", &x.version)
	m.Save("cachePolicy", &x.cachePolicy)
	m.Save("aname", &x.aname)
	m.Save("superBlockFlags", &x.superBlockFlags)
	m.Save("connID", &x.connID)
	m.Save("inodeMappings", &x.inodeMappings)
	m.Save("mounter", &x.mounter)
	m.Save("endpoints", &x.endpoints)
}

func (x *session) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.LoadWait("msize", &x.msize)
	m.LoadWait("version", &x.version)
	m.LoadWait("cachePolicy", &x.cachePolicy)
	m.LoadWait("aname", &x.aname)
	m.LoadWait("superBlockFlags", &x.superBlockFlags)
	m.LoadWait("connID", &x.connID)
	m.LoadWait("inodeMappings", &x.inodeMappings)
	m.LoadWait("mounter", &x.mounter)
	m.LoadWait("endpoints", &x.endpoints)
	m.AfterLoad(x.afterLoad)
}

func init() {
	state.Register("gofer.fileOperations", (*fileOperations)(nil), state.Fns{Save: (*fileOperations).save, Load: (*fileOperations).load})
	state.Register("gofer.cachePolicy", (*cachePolicy)(nil), state.Fns{Save: (*cachePolicy).save, Load: (*cachePolicy).load})
	state.Register("gofer.filesystem", (*filesystem)(nil), state.Fns{Save: (*filesystem).save, Load: (*filesystem).load})
	state.Register("gofer.opts", (*opts)(nil), state.Fns{Save: (*opts).save, Load: (*opts).load})
	state.Register("gofer.inodeOperations", (*inodeOperations)(nil), state.Fns{Save: (*inodeOperations).save, Load: (*inodeOperations).load})
	state.Register("gofer.inodeFileState", (*inodeFileState)(nil), state.Fns{Save: (*inodeFileState).save, Load: (*inodeFileState).load})
	state.Register("gofer.dummyClock", (*dummyClock)(nil), state.Fns{Save: (*dummyClock).save, Load: (*dummyClock).load})
	state.Register("gofer.dummyClockContext", (*dummyClockContext)(nil), state.Fns{Save: (*dummyClockContext).save, Load: (*dummyClockContext).load})
	state.Register("gofer.endpointMap", (*endpointMap)(nil), state.Fns{Save: (*endpointMap).save, Load: (*endpointMap).load})
	state.Register("gofer.session", (*session)(nil), state.Fns{Save: (*session).save, Load: (*session).load})
}
