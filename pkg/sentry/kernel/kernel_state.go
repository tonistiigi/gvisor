// automatically generated by stateify.

package kernel

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
	"gvisor.googlesource.com/gvisor/pkg/sentry/kernel/kdefs"
)

func (x *abstractEndpoint) beforeSave() {}
func (x *abstractEndpoint) save(m state.Map) {
	x.beforeSave()
	m.Save("ep", &x.ep)
	m.Save("wr", &x.wr)
	m.Save("name", &x.name)
	m.Save("ns", &x.ns)
}

func (x *abstractEndpoint) afterLoad() {}
func (x *abstractEndpoint) load(m state.Map) {
	m.Load("ep", &x.ep)
	m.Load("wr", &x.wr)
	m.Load("name", &x.name)
	m.Load("ns", &x.ns)
}

func (x *AbstractSocketNamespace) beforeSave() {}
func (x *AbstractSocketNamespace) save(m state.Map) {
	x.beforeSave()
	m.Save("endpoints", &x.endpoints)
}

func (x *AbstractSocketNamespace) afterLoad() {}
func (x *AbstractSocketNamespace) load(m state.Map) {
	m.Load("endpoints", &x.endpoints)
}

func (x *boundEndpoint) beforeSave() {}
func (x *boundEndpoint) save(m state.Map) {
	x.beforeSave()
	m.Save("BoundEndpoint", &x.BoundEndpoint)
	m.Save("rc", &x.rc)
}

func (x *boundEndpoint) afterLoad() {}
func (x *boundEndpoint) load(m state.Map) {
	m.Load("BoundEndpoint", &x.BoundEndpoint)
	m.Load("rc", &x.rc)
}

func (x *FDs) save(m state.Map) {
	m.SaveValue("", ([]kdefs.FD)(*x))
}

func (x *FDs) load(m state.Map) {
	m.LoadValue("", new([]kdefs.FD), func(y interface{}) { *x = (FDs)(y.([]kdefs.FD)) })
}

func (x *FDFlags) beforeSave() {}
func (x *FDFlags) save(m state.Map) {
	x.beforeSave()
	m.Save("CloseOnExec", &x.CloseOnExec)
}

func (x *FDFlags) afterLoad() {}
func (x *FDFlags) load(m state.Map) {
	m.Load("CloseOnExec", &x.CloseOnExec)
}

func (x *descriptor) beforeSave() {}
func (x *descriptor) save(m state.Map) {
	x.beforeSave()
	m.Save("file", &x.file)
	m.Save("flags", &x.flags)
}

func (x *descriptor) afterLoad() {}
func (x *descriptor) load(m state.Map) {
	m.Load("file", &x.file)
	m.Load("flags", &x.flags)
}

func (x *FDMap) beforeSave() {}
func (x *FDMap) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("k", &x.k)
	m.Save("files", &x.files)
	m.Save("uid", &x.uid)
}

func (x *FDMap) afterLoad() {}
func (x *FDMap) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("k", &x.k)
	m.Load("files", &x.files)
	m.Load("uid", &x.uid)
}

func (x *FSContext) beforeSave() {}
func (x *FSContext) save(m state.Map) {
	x.beforeSave()
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("root", &x.root)
	m.Save("cwd", &x.cwd)
	m.Save("umask", &x.umask)
}

func (x *FSContext) afterLoad() {}
func (x *FSContext) load(m state.Map) {
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("root", &x.root)
	m.Load("cwd", &x.cwd)
	m.Load("umask", &x.umask)
}

func (x *IPCNamespace) beforeSave() {}
func (x *IPCNamespace) save(m state.Map) {
	x.beforeSave()
	m.Save("userNS", &x.userNS)
	m.Save("semaphores", &x.semaphores)
	m.Save("shms", &x.shms)
}

func (x *IPCNamespace) afterLoad() {}
func (x *IPCNamespace) load(m state.Map) {
	m.Load("userNS", &x.userNS)
	m.Load("semaphores", &x.semaphores)
	m.Load("shms", &x.shms)
}

func (x *Kernel) beforeSave() {}
func (x *Kernel) save(m state.Map) {
	x.beforeSave()
	m.Save("featureSet", &x.featureSet)
	m.Save("timekeeper", &x.timekeeper)
	m.Save("tasks", &x.tasks)
	m.Save("rootUserNamespace", &x.rootUserNamespace)
	m.Save("applicationCores", &x.applicationCores)
	m.Save("useHostCores", &x.useHostCores)
	m.Save("extraAuxv", &x.extraAuxv)
	m.Save("vdso", &x.vdso)
	m.Save("rootUTSNamespace", &x.rootUTSNamespace)
	m.Save("rootIPCNamespace", &x.rootIPCNamespace)
	m.Save("mounts", &x.mounts)
	m.Save("globalInit", &x.globalInit)
	m.Save("realtimeClock", &x.realtimeClock)
	m.Save("monotonicClock", &x.monotonicClock)
	m.Save("syslog", &x.syslog)
	m.Save("cpuClock", &x.cpuClock)
	m.Save("fdMapUids", &x.fdMapUids)
	m.Save("uniqueID", &x.uniqueID)
	m.Save("nextInotifyCookie", &x.nextInotifyCookie)
	m.Save("netlinkPorts", &x.netlinkPorts)
	m.Save("exitErr", &x.exitErr)
}

func (x *Kernel) afterLoad() {}
func (x *Kernel) load(m state.Map) {
	m.Load("featureSet", &x.featureSet)
	m.Load("timekeeper", &x.timekeeper)
	m.Load("tasks", &x.tasks)
	m.Load("rootUserNamespace", &x.rootUserNamespace)
	m.Load("applicationCores", &x.applicationCores)
	m.Load("useHostCores", &x.useHostCores)
	m.Load("extraAuxv", &x.extraAuxv)
	m.Load("vdso", &x.vdso)
	m.Load("rootUTSNamespace", &x.rootUTSNamespace)
	m.Load("rootIPCNamespace", &x.rootIPCNamespace)
	m.Load("mounts", &x.mounts)
	m.Load("globalInit", &x.globalInit)
	m.Load("realtimeClock", &x.realtimeClock)
	m.Load("monotonicClock", &x.monotonicClock)
	m.Load("syslog", &x.syslog)
	m.Load("cpuClock", &x.cpuClock)
	m.Load("fdMapUids", &x.fdMapUids)
	m.Load("uniqueID", &x.uniqueID)
	m.Load("nextInotifyCookie", &x.nextInotifyCookie)
	m.Load("netlinkPorts", &x.netlinkPorts)
	m.Load("exitErr", &x.exitErr)
}

func (x *InitKernelArgs) beforeSave() {}
func (x *InitKernelArgs) save(m state.Map) {
	x.beforeSave()
	m.Save("FeatureSet", &x.FeatureSet)
	m.Save("Timekeeper", &x.Timekeeper)
	m.Save("RootUserNamespace", &x.RootUserNamespace)
	m.Save("NetworkStack", &x.NetworkStack)
	m.Save("ApplicationCores", &x.ApplicationCores)
	m.Save("UseHostCores", &x.UseHostCores)
	m.Save("ExtraAuxv", &x.ExtraAuxv)
	m.Save("Vdso", &x.Vdso)
	m.Save("RootUTSNamespace", &x.RootUTSNamespace)
	m.Save("RootIPCNamespace", &x.RootIPCNamespace)
}

func (x *InitKernelArgs) afterLoad() {}
func (x *InitKernelArgs) load(m state.Map) {
	m.Load("FeatureSet", &x.FeatureSet)
	m.Load("Timekeeper", &x.Timekeeper)
	m.Load("RootUserNamespace", &x.RootUserNamespace)
	m.Load("NetworkStack", &x.NetworkStack)
	m.Load("ApplicationCores", &x.ApplicationCores)
	m.Load("UseHostCores", &x.UseHostCores)
	m.Load("ExtraAuxv", &x.ExtraAuxv)
	m.Load("Vdso", &x.Vdso)
	m.Load("RootUTSNamespace", &x.RootUTSNamespace)
	m.Load("RootIPCNamespace", &x.RootIPCNamespace)
}

func (x *CreateProcessArgs) beforeSave() {}
func (x *CreateProcessArgs) save(m state.Map) {
	x.beforeSave()
	m.Save("Filename", &x.Filename)
	m.Save("Argv", &x.Argv)
	m.Save("Envv", &x.Envv)
	m.Save("WorkingDirectory", &x.WorkingDirectory)
	m.Save("Credentials", &x.Credentials)
	m.Save("FDMap", &x.FDMap)
	m.Save("Umask", &x.Umask)
	m.Save("Limits", &x.Limits)
	m.Save("MaxSymlinkTraversals", &x.MaxSymlinkTraversals)
	m.Save("UTSNamespace", &x.UTSNamespace)
	m.Save("IPCNamespace", &x.IPCNamespace)
}

func (x *CreateProcessArgs) afterLoad() {}
func (x *CreateProcessArgs) load(m state.Map) {
	m.Load("Filename", &x.Filename)
	m.Load("Argv", &x.Argv)
	m.Load("Envv", &x.Envv)
	m.Load("WorkingDirectory", &x.WorkingDirectory)
	m.Load("Credentials", &x.Credentials)
	m.Load("FDMap", &x.FDMap)
	m.Load("Umask", &x.Umask)
	m.Load("Limits", &x.Limits)
	m.Load("MaxSymlinkTraversals", &x.MaxSymlinkTraversals)
	m.Load("UTSNamespace", &x.UTSNamespace)
	m.Load("IPCNamespace", &x.IPCNamespace)
}

func (x *createProcessContext) beforeSave() {}
func (x *createProcessContext) save(m state.Map) {
	x.beforeSave()
	m.Save("NoopSleeper", &x.NoopSleeper)
	m.Save("Logger", &x.Logger)
	m.Save("k", &x.k)
	m.Save("args", &x.args)
}

func (x *createProcessContext) afterLoad() {}
func (x *createProcessContext) load(m state.Map) {
	m.Load("NoopSleeper", &x.NoopSleeper)
	m.Load("Logger", &x.Logger)
	m.Load("k", &x.k)
	m.Load("args", &x.args)
}

func (x *supervisorContext) beforeSave() {}
func (x *supervisorContext) save(m state.Map) {
	x.beforeSave()
	m.Save("NoopSleeper", &x.NoopSleeper)
	m.Save("Logger", &x.Logger)
	m.Save("k", &x.k)
}

func (x *supervisorContext) afterLoad() {}
func (x *supervisorContext) load(m state.Map) {
	m.Load("NoopSleeper", &x.NoopSleeper)
	m.Load("Logger", &x.Logger)
	m.Load("k", &x.k)
}

func (x *kernelCPUClockListener) beforeSave() {}
func (x *kernelCPUClockListener) save(m state.Map) {
	x.beforeSave()
	m.Save("k", &x.k)
}

func (x *kernelCPUClockListener) afterLoad() {}
func (x *kernelCPUClockListener) load(m state.Map) {
	m.Load("k", &x.k)
}

func (x *pendingSignals) beforeSave() {}
func (x *pendingSignals) save(m state.Map) {
	x.beforeSave()
	m.Save("signals", &x.signals)
	m.Save("pendingSet", &x.pendingSet)
}

func (x *pendingSignals) afterLoad() {}
func (x *pendingSignals) load(m state.Map) {
	m.Load("signals", &x.signals)
	m.Load("pendingSet", &x.pendingSet)
}

func (x *pendingSignalQueue) beforeSave() {}
func (x *pendingSignalQueue) save(m state.Map) {
	x.beforeSave()
	m.Save("pendingSignalList", &x.pendingSignalList)
	m.Save("length", &x.length)
}

func (x *pendingSignalQueue) afterLoad() {}
func (x *pendingSignalQueue) load(m state.Map) {
	m.Load("pendingSignalList", &x.pendingSignalList)
	m.Load("length", &x.length)
}

func (x *pendingSignal) beforeSave() {}
func (x *pendingSignal) save(m state.Map) {
	x.beforeSave()
	m.Save("pendingSignalEntry", &x.pendingSignalEntry)
	m.Save("SignalInfo", &x.SignalInfo)
}

func (x *pendingSignal) afterLoad() {}
func (x *pendingSignal) load(m state.Map) {
	m.Load("pendingSignalEntry", &x.pendingSignalEntry)
	m.Load("SignalInfo", &x.SignalInfo)
}

func (x *pendingSignalList) beforeSave() {}
func (x *pendingSignalList) save(m state.Map) {
	x.beforeSave()
	m.Save("head", &x.head)
	m.Save("tail", &x.tail)
}

func (x *pendingSignalList) afterLoad() {}
func (x *pendingSignalList) load(m state.Map) {
	m.Load("head", &x.head)
	m.Load("tail", &x.tail)
}

func (x *pendingSignalEntry) beforeSave() {}
func (x *pendingSignalEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("next", &x.next)
	m.Save("prev", &x.prev)
}

func (x *pendingSignalEntry) afterLoad() {}
func (x *pendingSignalEntry) load(m state.Map) {
	m.Load("next", &x.next)
	m.Load("prev", &x.prev)
}

func (x *processGroupList) beforeSave() {}
func (x *processGroupList) save(m state.Map) {
	x.beforeSave()
	m.Save("head", &x.head)
	m.Save("tail", &x.tail)
}

func (x *processGroupList) afterLoad() {}
func (x *processGroupList) load(m state.Map) {
	m.Load("head", &x.head)
	m.Load("tail", &x.tail)
}

func (x *processGroupEntry) beforeSave() {}
func (x *processGroupEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("next", &x.next)
	m.Save("prev", &x.prev)
}

func (x *processGroupEntry) afterLoad() {}
func (x *processGroupEntry) load(m state.Map) {
	m.Load("next", &x.next)
	m.Load("prev", &x.prev)
}

func (x *ptraceOptions) beforeSave() {}
func (x *ptraceOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("ExitKill", &x.ExitKill)
	m.Save("SysGood", &x.SysGood)
	m.Save("TraceClone", &x.TraceClone)
	m.Save("TraceExec", &x.TraceExec)
	m.Save("TraceExit", &x.TraceExit)
	m.Save("TraceFork", &x.TraceFork)
	m.Save("TraceSeccomp", &x.TraceSeccomp)
	m.Save("TraceVfork", &x.TraceVfork)
	m.Save("TraceVforkDone", &x.TraceVforkDone)
}

func (x *ptraceOptions) afterLoad() {}
func (x *ptraceOptions) load(m state.Map) {
	m.Load("ExitKill", &x.ExitKill)
	m.Load("SysGood", &x.SysGood)
	m.Load("TraceClone", &x.TraceClone)
	m.Load("TraceExec", &x.TraceExec)
	m.Load("TraceExit", &x.TraceExit)
	m.Load("TraceFork", &x.TraceFork)
	m.Load("TraceSeccomp", &x.TraceSeccomp)
	m.Load("TraceVfork", &x.TraceVfork)
	m.Load("TraceVforkDone", &x.TraceVforkDone)
}

func (x *ptraceSyscallMode) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *ptraceSyscallMode) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (ptraceSyscallMode)(y.(int)) })
}

func (x *ptraceStop) beforeSave() {}
func (x *ptraceStop) save(m state.Map) {
	x.beforeSave()
	m.Save("frozen", &x.frozen)
}

func (x *ptraceStop) afterLoad() {}
func (x *ptraceStop) load(m state.Map) {
	m.Load("frozen", &x.frozen)
}

func (x *ptraceCloneKind) save(m state.Map) {
	m.SaveValue("", (int32)(*x))
}

func (x *ptraceCloneKind) load(m state.Map) {
	m.LoadValue("", new(int32), func(y interface{}) { *x = (ptraceCloneKind)(y.(int32)) })
}

func (x *RSEQCriticalRegion) beforeSave() {}
func (x *RSEQCriticalRegion) save(m state.Map) {
	x.beforeSave()
	m.Save("CriticalSection", &x.CriticalSection)
	m.Save("Restart", &x.Restart)
}

func (x *RSEQCriticalRegion) afterLoad() {}
func (x *RSEQCriticalRegion) load(m state.Map) {
	m.Load("CriticalSection", &x.CriticalSection)
	m.Load("Restart", &x.Restart)
}

func (x *sessionList) beforeSave() {}
func (x *sessionList) save(m state.Map) {
	x.beforeSave()
	m.Save("head", &x.head)
	m.Save("tail", &x.tail)
}

func (x *sessionList) afterLoad() {}
func (x *sessionList) load(m state.Map) {
	m.Load("head", &x.head)
	m.Load("tail", &x.tail)
}

func (x *sessionEntry) beforeSave() {}
func (x *sessionEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("next", &x.next)
	m.Save("prev", &x.prev)
}

func (x *sessionEntry) afterLoad() {}
func (x *sessionEntry) load(m state.Map) {
	m.Load("next", &x.next)
	m.Load("prev", &x.prev)
}

func (x *SessionID) save(m state.Map) {
	m.SaveValue("", (ThreadID)(*x))
}

func (x *SessionID) load(m state.Map) {
	m.LoadValue("", new(ThreadID), func(y interface{}) { *x = (SessionID)(y.(ThreadID)) })
}

func (x *ProcessGroupID) save(m state.Map) {
	m.SaveValue("", (ThreadID)(*x))
}

func (x *ProcessGroupID) load(m state.Map) {
	m.LoadValue("", new(ThreadID), func(y interface{}) { *x = (ProcessGroupID)(y.(ThreadID)) })
}

func (x *Session) beforeSave() {}
func (x *Session) save(m state.Map) {
	x.beforeSave()
	m.Save("refs", &x.refs)
	m.Save("leader", &x.leader)
	m.Save("id", &x.id)
	m.Save("processGroups", &x.processGroups)
	m.Save("sessionEntry", &x.sessionEntry)
}

func (x *Session) afterLoad() {}
func (x *Session) load(m state.Map) {
	m.Load("refs", &x.refs)
	m.Load("leader", &x.leader)
	m.Load("id", &x.id)
	m.Load("processGroups", &x.processGroups)
	m.Load("sessionEntry", &x.sessionEntry)
}

func (x *ProcessGroup) beforeSave() {}
func (x *ProcessGroup) save(m state.Map) {
	x.beforeSave()
	m.Save("refs", &x.refs)
	m.Save("originator", &x.originator)
	m.Save("id", &x.id)
	m.Save("session", &x.session)
	m.Save("ancestors", &x.ancestors)
	m.Save("processGroupEntry", &x.processGroupEntry)
}

func (x *ProcessGroup) afterLoad() {}
func (x *ProcessGroup) load(m state.Map) {
	m.Load("refs", &x.refs)
	m.Load("originator", &x.originator)
	m.Load("id", &x.id)
	m.Load("session", &x.session)
	m.Load("ancestors", &x.ancestors)
	m.Load("processGroupEntry", &x.processGroupEntry)
}

func (x *SignalHandlers) beforeSave() {}
func (x *SignalHandlers) save(m state.Map) {
	x.beforeSave()
	m.Save("actions", &x.actions)
}

func (x *SignalHandlers) afterLoad() {}
func (x *SignalHandlers) load(m state.Map) {
	m.Load("actions", &x.actions)
}

func (x *SyscallFlagsTable) beforeSave() {}
func (x *SyscallFlagsTable) save(m state.Map) {
	x.beforeSave()
	m.Save("mu", &x.mu)
	m.Save("enable", &x.enable)
	m.Save("missingEnable", &x.missingEnable)
}

func (x *SyscallFlagsTable) afterLoad() {}
func (x *SyscallFlagsTable) load(m state.Map) {
	m.Load("mu", &x.mu)
	m.Load("enable", &x.enable)
	m.Load("missingEnable", &x.missingEnable)
}

func (x *SyscallTable) beforeSave() {}
func (x *SyscallTable) save(m state.Map) {
	x.beforeSave()
	m.Save("OS", &x.OS)
	m.Save("Arch", &x.Arch)
}

func (x *SyscallTable) load(m state.Map) {
	m.LoadWait("OS", &x.OS)
	m.LoadWait("Arch", &x.Arch)
	m.AfterLoad(x.afterLoad)
}

func (x *syslog) beforeSave() {}
func (x *syslog) save(m state.Map) {
	x.beforeSave()
	m.Save("msg", &x.msg)
}

func (x *syslog) afterLoad() {}
func (x *syslog) load(m state.Map) {
	m.Load("msg", &x.msg)
}

func (x *Task) beforeSave() {}
func (x *Task) save(m state.Map) {
	x.beforeSave()
	var ptraceTracer *Task = x.savePtraceTracer()
	m.SaveValue("ptraceTracer", ptraceTracer)
	var logPrefix string = x.saveLogPrefix()
	m.SaveValue("logPrefix", logPrefix)
	m.Save("taskNode", &x.taskNode)
	m.Save("runState", &x.runState)
	m.Save("haveSyscallReturn", &x.haveSyscallReturn)
	m.Save("gosched", &x.gosched)
	m.Save("yieldCount", &x.yieldCount)
	m.Save("pendingSignals", &x.pendingSignals)
	m.Save("haveSavedSignalMask", &x.haveSavedSignalMask)
	m.Save("savedSignalMask", &x.savedSignalMask)
	m.Save("signalStack", &x.signalStack)
	m.Save("groupStopRequired", &x.groupStopRequired)
	m.Save("groupStopAcknowledged", &x.groupStopAcknowledged)
	m.Save("stop", &x.stop)
	m.Save("exitStatus", &x.exitStatus)
	m.Save("syscallRestartBlock", &x.syscallRestartBlock)
	m.Save("tc", &x.tc)
	m.Save("tr", &x.tr)
	m.Save("k", &x.k)
	m.Save("vforkParent", &x.vforkParent)
	m.Save("exitState", &x.exitState)
	m.Save("exitTracerNotified", &x.exitTracerNotified)
	m.Save("exitTracerAcked", &x.exitTracerAcked)
	m.Save("exitParentNotified", &x.exitParentNotified)
	m.Save("exitParentAcked", &x.exitParentAcked)
	m.Save("ptraceTracees", &x.ptraceTracees)
	m.Save("ptraceOpts", &x.ptraceOpts)
	m.Save("ptraceSyscallMode", &x.ptraceSyscallMode)
	m.Save("ptraceSinglestep", &x.ptraceSinglestep)
	m.Save("ptraceCode", &x.ptraceCode)
	m.Save("ptraceSiginfo", &x.ptraceSiginfo)
	m.Save("ptraceEventMsg", &x.ptraceEventMsg)
	m.Save("ioUsage", &x.ioUsage)
	m.Save("creds", &x.creds)
	m.Save("utsns", &x.utsns)
	m.Save("ipcns", &x.ipcns)
	m.Save("parentDeathSignal", &x.parentDeathSignal)
	m.Save("syscallFilters", &x.syscallFilters)
	m.Save("cleartid", &x.cleartid)
	m.Save("allowedCPUMask", &x.allowedCPUMask)
	m.Save("cpu", &x.cpu)
	m.Save("niceness", &x.niceness)
	m.Save("numaPolicy", &x.numaPolicy)
	m.Save("numaNodeMask", &x.numaNodeMask)
	m.Save("netns", &x.netns)
	m.Save("rseqCPUAddr", &x.rseqCPUAddr)
	m.Save("rseqCPU", &x.rseqCPU)
	m.Save("startTime", &x.startTime)
}

func (x *Task) load(m state.Map) {
	m.Load("taskNode", &x.taskNode)
	m.Load("runState", &x.runState)
	m.Load("haveSyscallReturn", &x.haveSyscallReturn)
	m.Load("gosched", &x.gosched)
	m.Load("yieldCount", &x.yieldCount)
	m.Load("pendingSignals", &x.pendingSignals)
	m.Load("haveSavedSignalMask", &x.haveSavedSignalMask)
	m.Load("savedSignalMask", &x.savedSignalMask)
	m.Load("signalStack", &x.signalStack)
	m.Load("groupStopRequired", &x.groupStopRequired)
	m.Load("groupStopAcknowledged", &x.groupStopAcknowledged)
	m.Load("stop", &x.stop)
	m.Load("exitStatus", &x.exitStatus)
	m.Load("syscallRestartBlock", &x.syscallRestartBlock)
	m.Load("tc", &x.tc)
	m.Load("tr", &x.tr)
	m.Load("k", &x.k)
	m.Load("vforkParent", &x.vforkParent)
	m.Load("exitState", &x.exitState)
	m.Load("exitTracerNotified", &x.exitTracerNotified)
	m.Load("exitTracerAcked", &x.exitTracerAcked)
	m.Load("exitParentNotified", &x.exitParentNotified)
	m.Load("exitParentAcked", &x.exitParentAcked)
	m.Load("ptraceTracees", &x.ptraceTracees)
	m.Load("ptraceOpts", &x.ptraceOpts)
	m.Load("ptraceSyscallMode", &x.ptraceSyscallMode)
	m.Load("ptraceSinglestep", &x.ptraceSinglestep)
	m.Load("ptraceCode", &x.ptraceCode)
	m.Load("ptraceSiginfo", &x.ptraceSiginfo)
	m.Load("ptraceEventMsg", &x.ptraceEventMsg)
	m.Load("ioUsage", &x.ioUsage)
	m.Load("creds", &x.creds)
	m.Load("utsns", &x.utsns)
	m.Load("ipcns", &x.ipcns)
	m.Load("parentDeathSignal", &x.parentDeathSignal)
	m.Load("syscallFilters", &x.syscallFilters)
	m.Load("cleartid", &x.cleartid)
	m.Load("allowedCPUMask", &x.allowedCPUMask)
	m.Load("cpu", &x.cpu)
	m.Load("niceness", &x.niceness)
	m.Load("numaPolicy", &x.numaPolicy)
	m.Load("numaNodeMask", &x.numaNodeMask)
	m.Load("netns", &x.netns)
	m.Load("rseqCPUAddr", &x.rseqCPUAddr)
	m.Load("rseqCPU", &x.rseqCPU)
	m.Load("startTime", &x.startTime)
	m.LoadValue("ptraceTracer", new(*Task), func(y interface{}) { x.loadPtraceTracer(y.(*Task)) })
	m.LoadValue("logPrefix", new(string), func(y interface{}) { x.loadLogPrefix(y.(string)) })
	m.AfterLoad(x.afterLoad)
}

func (x *SharingOptions) beforeSave() {}
func (x *SharingOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("NewAddressSpace", &x.NewAddressSpace)
	m.Save("NewSignalHandlers", &x.NewSignalHandlers)
	m.Save("NewThreadGroup", &x.NewThreadGroup)
	m.Save("TerminationSignal", &x.TerminationSignal)
	m.Save("NewPIDNamespace", &x.NewPIDNamespace)
	m.Save("NewUserNamespace", &x.NewUserNamespace)
	m.Save("NewNetworkNamespace", &x.NewNetworkNamespace)
	m.Save("NewFiles", &x.NewFiles)
	m.Save("NewFSContext", &x.NewFSContext)
	m.Save("NewUTSNamespace", &x.NewUTSNamespace)
	m.Save("NewIPCNamespace", &x.NewIPCNamespace)
}

func (x *SharingOptions) afterLoad() {}
func (x *SharingOptions) load(m state.Map) {
	m.Load("NewAddressSpace", &x.NewAddressSpace)
	m.Load("NewSignalHandlers", &x.NewSignalHandlers)
	m.Load("NewThreadGroup", &x.NewThreadGroup)
	m.Load("TerminationSignal", &x.TerminationSignal)
	m.Load("NewPIDNamespace", &x.NewPIDNamespace)
	m.Load("NewUserNamespace", &x.NewUserNamespace)
	m.Load("NewNetworkNamespace", &x.NewNetworkNamespace)
	m.Load("NewFiles", &x.NewFiles)
	m.Load("NewFSContext", &x.NewFSContext)
	m.Load("NewUTSNamespace", &x.NewUTSNamespace)
	m.Load("NewIPCNamespace", &x.NewIPCNamespace)
}

func (x *CloneOptions) beforeSave() {}
func (x *CloneOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("SharingOptions", &x.SharingOptions)
	m.Save("Stack", &x.Stack)
	m.Save("SetTLS", &x.SetTLS)
	m.Save("TLS", &x.TLS)
	m.Save("ChildClearTID", &x.ChildClearTID)
	m.Save("ChildSetTID", &x.ChildSetTID)
	m.Save("ChildTID", &x.ChildTID)
	m.Save("ParentSetTID", &x.ParentSetTID)
	m.Save("ParentTID", &x.ParentTID)
	m.Save("Vfork", &x.Vfork)
	m.Save("Untraced", &x.Untraced)
	m.Save("InheritTracer", &x.InheritTracer)
}

func (x *CloneOptions) afterLoad() {}
func (x *CloneOptions) load(m state.Map) {
	m.Load("SharingOptions", &x.SharingOptions)
	m.Load("Stack", &x.Stack)
	m.Load("SetTLS", &x.SetTLS)
	m.Load("TLS", &x.TLS)
	m.Load("ChildClearTID", &x.ChildClearTID)
	m.Load("ChildSetTID", &x.ChildSetTID)
	m.Load("ChildTID", &x.ChildTID)
	m.Load("ParentSetTID", &x.ParentSetTID)
	m.Load("ParentTID", &x.ParentTID)
	m.Load("Vfork", &x.Vfork)
	m.Load("Untraced", &x.Untraced)
	m.Load("InheritTracer", &x.InheritTracer)
}

func (x *runSyscallAfterPtraceEventClone) beforeSave() {}
func (x *runSyscallAfterPtraceEventClone) save(m state.Map) {
	x.beforeSave()
	m.Save("vforkChild", &x.vforkChild)
	m.Save("vforkChildTID", &x.vforkChildTID)
}

func (x *runSyscallAfterPtraceEventClone) afterLoad() {}
func (x *runSyscallAfterPtraceEventClone) load(m state.Map) {
	m.Load("vforkChild", &x.vforkChild)
	m.Load("vforkChildTID", &x.vforkChildTID)
}

func (x *runSyscallAfterVforkStop) beforeSave() {}
func (x *runSyscallAfterVforkStop) save(m state.Map) {
	x.beforeSave()
	m.Save("childTID", &x.childTID)
}

func (x *runSyscallAfterVforkStop) afterLoad() {}
func (x *runSyscallAfterVforkStop) load(m state.Map) {
	m.Load("childTID", &x.childTID)
}

func (x *vforkStop) beforeSave() {}
func (x *vforkStop) save(m state.Map) {
	x.beforeSave()
}

func (x *vforkStop) afterLoad() {}
func (x *vforkStop) load(m state.Map) {
}

func (x *TaskContext) beforeSave() {}
func (x *TaskContext) save(m state.Map) {
	x.beforeSave()
	m.Save("Name", &x.Name)
	m.Save("Arch", &x.Arch)
	m.Save("MemoryManager", &x.MemoryManager)
	m.Save("fu", &x.fu)
	m.Save("st", &x.st)
}

func (x *TaskContext) afterLoad() {}
func (x *TaskContext) load(m state.Map) {
	m.Load("Name", &x.Name)
	m.Load("Arch", &x.Arch)
	m.Load("MemoryManager", &x.MemoryManager)
	m.Load("fu", &x.fu)
	m.Load("st", &x.st)
}

func (x *execStop) beforeSave() {}
func (x *execStop) save(m state.Map) {
	x.beforeSave()
}

func (x *execStop) afterLoad() {}
func (x *execStop) load(m state.Map) {
}

func (x *runSyscallAfterExecStop) beforeSave() {}
func (x *runSyscallAfterExecStop) save(m state.Map) {
	x.beforeSave()
	m.Save("tc", &x.tc)
}

func (x *runSyscallAfterExecStop) afterLoad() {}
func (x *runSyscallAfterExecStop) load(m state.Map) {
	m.Load("tc", &x.tc)
}

func (x *ExitStatus) beforeSave() {}
func (x *ExitStatus) save(m state.Map) {
	x.beforeSave()
	m.Save("Code", &x.Code)
	m.Save("Signo", &x.Signo)
}

func (x *ExitStatus) afterLoad() {}
func (x *ExitStatus) load(m state.Map) {
	m.Load("Code", &x.Code)
	m.Load("Signo", &x.Signo)
}

func (x *TaskExitState) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *TaskExitState) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (TaskExitState)(y.(int)) })
}

func (x *runExit) beforeSave() {}
func (x *runExit) save(m state.Map) {
	x.beforeSave()
}

func (x *runExit) afterLoad() {}
func (x *runExit) load(m state.Map) {
}

func (x *runExitMain) beforeSave() {}
func (x *runExitMain) save(m state.Map) {
	x.beforeSave()
}

func (x *runExitMain) afterLoad() {}
func (x *runExitMain) load(m state.Map) {
}

func (x *runExitNotify) beforeSave() {}
func (x *runExitNotify) save(m state.Map) {
	x.beforeSave()
}

func (x *runExitNotify) afterLoad() {}
func (x *runExitNotify) load(m state.Map) {
}

func (x *WaitOptions) beforeSave() {}
func (x *WaitOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("SpecificTID", &x.SpecificTID)
	m.Save("SpecificPGID", &x.SpecificPGID)
	m.Save("NonCloneTasks", &x.NonCloneTasks)
	m.Save("CloneTasks", &x.CloneTasks)
	m.Save("Events", &x.Events)
	m.Save("ConsumeEvent", &x.ConsumeEvent)
	m.Save("BlockInterruptErr", &x.BlockInterruptErr)
}

func (x *WaitOptions) afterLoad() {}
func (x *WaitOptions) load(m state.Map) {
	m.Load("SpecificTID", &x.SpecificTID)
	m.Load("SpecificPGID", &x.SpecificPGID)
	m.Load("NonCloneTasks", &x.NonCloneTasks)
	m.Load("CloneTasks", &x.CloneTasks)
	m.Load("Events", &x.Events)
	m.Load("ConsumeEvent", &x.ConsumeEvent)
	m.Load("BlockInterruptErr", &x.BlockInterruptErr)
}

func (x *WaitResult) beforeSave() {}
func (x *WaitResult) save(m state.Map) {
	x.beforeSave()
	m.Save("Task", &x.Task)
	m.Save("TID", &x.TID)
	m.Save("UID", &x.UID)
	m.Save("Event", &x.Event)
	m.Save("Status", &x.Status)
}

func (x *WaitResult) afterLoad() {}
func (x *WaitResult) load(m state.Map) {
	m.Load("Task", &x.Task)
	m.Load("TID", &x.TID)
	m.Load("UID", &x.UID)
	m.Load("Event", &x.Event)
	m.Load("Status", &x.Status)
}

func (x *taskList) beforeSave() {}
func (x *taskList) save(m state.Map) {
	x.beforeSave()
	m.Save("head", &x.head)
	m.Save("tail", &x.tail)
}

func (x *taskList) afterLoad() {}
func (x *taskList) load(m state.Map) {
	m.Load("head", &x.head)
	m.Load("tail", &x.tail)
}

func (x *taskEntry) beforeSave() {}
func (x *taskEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("next", &x.next)
	m.Save("prev", &x.prev)
}

func (x *taskEntry) afterLoad() {}
func (x *taskEntry) load(m state.Map) {
	m.Load("next", &x.next)
	m.Load("prev", &x.prev)
}

func (x *TaskResources) beforeSave() {}
func (x *TaskResources) save(m state.Map) {
	x.beforeSave()
	m.Save("SignalMask", &x.SignalMask)
	m.Save("FSContext", &x.FSContext)
	m.Save("FDMap", &x.FDMap)
	m.Save("AbstractSockets", &x.AbstractSockets)
}

func (x *TaskResources) afterLoad() {}
func (x *TaskResources) load(m state.Map) {
	m.Load("SignalMask", &x.SignalMask)
	m.Load("FSContext", &x.FSContext)
	m.Load("FDMap", &x.FDMap)
	m.Load("AbstractSockets", &x.AbstractSockets)
}

func (x *runApp) beforeSave() {}
func (x *runApp) save(m state.Map) {
	x.beforeSave()
}

func (x *runApp) afterLoad() {}
func (x *runApp) load(m state.Map) {
}

func (x *TaskGoroutineState) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *TaskGoroutineState) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (TaskGoroutineState)(y.(int)) })
}

func (x *TaskGoroutineSchedInfo) beforeSave() {}
func (x *TaskGoroutineSchedInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Timestamp", &x.Timestamp)
	m.Save("State", &x.State)
	m.Save("UserTicks", &x.UserTicks)
	m.Save("SysTicks", &x.SysTicks)
}

func (x *TaskGoroutineSchedInfo) afterLoad() {}
func (x *TaskGoroutineSchedInfo) load(m state.Map) {
	m.Load("Timestamp", &x.Timestamp)
	m.Load("State", &x.State)
	m.Load("UserTicks", &x.UserTicks)
	m.Load("SysTicks", &x.SysTicks)
}

func (x *SignalAction) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *SignalAction) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (SignalAction)(y.(int)) })
}

func (x *groupStop) beforeSave() {}
func (x *groupStop) save(m state.Map) {
	x.beforeSave()
}

func (x *groupStop) afterLoad() {}
func (x *groupStop) load(m state.Map) {
}

func (x *groupStopPhase) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *groupStopPhase) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (groupStopPhase)(y.(int)) })
}

func (x *runInterrupt) beforeSave() {}
func (x *runInterrupt) save(m state.Map) {
	x.beforeSave()
}

func (x *runInterrupt) afterLoad() {}
func (x *runInterrupt) load(m state.Map) {
}

func (x *runInterruptAfterSignalDeliveryStop) beforeSave() {}
func (x *runInterruptAfterSignalDeliveryStop) save(m state.Map) {
	x.beforeSave()
}

func (x *runInterruptAfterSignalDeliveryStop) afterLoad() {}
func (x *runInterruptAfterSignalDeliveryStop) load(m state.Map) {
}

func (x *TaskConfig) beforeSave() {}
func (x *TaskConfig) save(m state.Map) {
	x.beforeSave()
	m.Save("Kernel", &x.Kernel)
	m.Save("Parent", &x.Parent)
	m.Save("ThreadGroup", &x.ThreadGroup)
	m.Save("TaskContext", &x.TaskContext)
	m.Save("TaskResources", &x.TaskResources)
	m.Save("Credentials", &x.Credentials)
	m.Save("Niceness", &x.Niceness)
	m.Save("NetworkNamespaced", &x.NetworkNamespaced)
	m.Save("AllowedCPUMask", &x.AllowedCPUMask)
	m.Save("UTSNamespace", &x.UTSNamespace)
	m.Save("IPCNamespace", &x.IPCNamespace)
}

func (x *TaskConfig) afterLoad() {}
func (x *TaskConfig) load(m state.Map) {
	m.Load("Kernel", &x.Kernel)
	m.Load("Parent", &x.Parent)
	m.Load("ThreadGroup", &x.ThreadGroup)
	m.Load("TaskContext", &x.TaskContext)
	m.Load("TaskResources", &x.TaskResources)
	m.Load("Credentials", &x.Credentials)
	m.Load("Niceness", &x.Niceness)
	m.Load("NetworkNamespaced", &x.NetworkNamespaced)
	m.Load("AllowedCPUMask", &x.AllowedCPUMask)
	m.Load("UTSNamespace", &x.UTSNamespace)
	m.Load("IPCNamespace", &x.IPCNamespace)
}

func (x *SyscallRestartErrno) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *SyscallRestartErrno) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (SyscallRestartErrno)(y.(int)) })
}

func (x *SyscallControl) beforeSave() {}
func (x *SyscallControl) save(m state.Map) {
	x.beforeSave()
	m.Save("next", &x.next)
	m.Save("ignoreReturn", &x.ignoreReturn)
}

func (x *SyscallControl) afterLoad() {}
func (x *SyscallControl) load(m state.Map) {
	m.Load("next", &x.next)
	m.Load("ignoreReturn", &x.ignoreReturn)
}

func (x *runSyscallAfterPtraceEventSeccomp) beforeSave() {}
func (x *runSyscallAfterPtraceEventSeccomp) save(m state.Map) {
	x.beforeSave()
}

func (x *runSyscallAfterPtraceEventSeccomp) afterLoad() {}
func (x *runSyscallAfterPtraceEventSeccomp) load(m state.Map) {
}

func (x *runSyscallAfterSyscallEnterStop) beforeSave() {}
func (x *runSyscallAfterSyscallEnterStop) save(m state.Map) {
	x.beforeSave()
}

func (x *runSyscallAfterSyscallEnterStop) afterLoad() {}
func (x *runSyscallAfterSyscallEnterStop) load(m state.Map) {
}

func (x *runSyscallAfterSysemuStop) beforeSave() {}
func (x *runSyscallAfterSysemuStop) save(m state.Map) {
	x.beforeSave()
}

func (x *runSyscallAfterSysemuStop) afterLoad() {}
func (x *runSyscallAfterSysemuStop) load(m state.Map) {
}

func (x *runSyscallReinvoke) beforeSave() {}
func (x *runSyscallReinvoke) save(m state.Map) {
	x.beforeSave()
}

func (x *runSyscallReinvoke) afterLoad() {}
func (x *runSyscallReinvoke) load(m state.Map) {
}

func (x *runSyscallExit) beforeSave() {}
func (x *runSyscallExit) save(m state.Map) {
	x.beforeSave()
}

func (x *runSyscallExit) afterLoad() {}
func (x *runSyscallExit) load(m state.Map) {
}

func (x *runVsyscallAfterPtraceEventSeccomp) beforeSave() {}
func (x *runVsyscallAfterPtraceEventSeccomp) save(m state.Map) {
	x.beforeSave()
	m.Save("addr", &x.addr)
	m.Save("sysno", &x.sysno)
	m.Save("caller", &x.caller)
}

func (x *runVsyscallAfterPtraceEventSeccomp) afterLoad() {}
func (x *runVsyscallAfterPtraceEventSeccomp) load(m state.Map) {
	m.Load("addr", &x.addr)
	m.Load("sysno", &x.sysno)
	m.Load("caller", &x.caller)
}

func (x *ThreadGroup) beforeSave() {}
func (x *ThreadGroup) save(m state.Map) {
	x.beforeSave()
	var rscr *RSEQCriticalRegion = x.saveRscr()
	m.SaveValue("rscr", rscr)
	m.Save("threadGroupNode", &x.threadGroupNode)
	m.Save("signalHandlers", &x.signalHandlers)
	m.Save("pendingSignals", &x.pendingSignals)
	m.Save("lastTimerSignalTask", &x.lastTimerSignalTask)
	m.Save("groupStopPhase", &x.groupStopPhase)
	m.Save("groupStopSignal", &x.groupStopSignal)
	m.Save("groupStopCount", &x.groupStopCount)
	m.Save("groupStopWaitable", &x.groupStopWaitable)
	m.Save("groupContNotify", &x.groupContNotify)
	m.Save("groupContInterrupted", &x.groupContInterrupted)
	m.Save("groupContWaitable", &x.groupContWaitable)
	m.Save("exiting", &x.exiting)
	m.Save("exitStatus", &x.exitStatus)
	m.Save("terminationSignal", &x.terminationSignal)
	m.Save("tm", &x.tm)
	m.Save("exitedCPUStats", &x.exitedCPUStats)
	m.Save("childCPUStats", &x.childCPUStats)
	m.Save("ioUsage", &x.ioUsage)
	m.Save("maxRSS", &x.maxRSS)
	m.Save("childMaxRSS", &x.childMaxRSS)
	m.Save("limits", &x.limits)
	m.Save("processGroup", &x.processGroup)
	m.Save("execed", &x.execed)
}

func (x *ThreadGroup) afterLoad() {}
func (x *ThreadGroup) load(m state.Map) {
	m.Load("threadGroupNode", &x.threadGroupNode)
	m.Load("signalHandlers", &x.signalHandlers)
	m.Load("pendingSignals", &x.pendingSignals)
	m.Load("lastTimerSignalTask", &x.lastTimerSignalTask)
	m.Load("groupStopPhase", &x.groupStopPhase)
	m.Load("groupStopSignal", &x.groupStopSignal)
	m.Load("groupStopCount", &x.groupStopCount)
	m.Load("groupStopWaitable", &x.groupStopWaitable)
	m.Load("groupContNotify", &x.groupContNotify)
	m.Load("groupContInterrupted", &x.groupContInterrupted)
	m.Load("groupContWaitable", &x.groupContWaitable)
	m.Load("exiting", &x.exiting)
	m.Load("exitStatus", &x.exitStatus)
	m.Load("terminationSignal", &x.terminationSignal)
	m.Load("tm", &x.tm)
	m.Load("exitedCPUStats", &x.exitedCPUStats)
	m.Load("childCPUStats", &x.childCPUStats)
	m.Load("ioUsage", &x.ioUsage)
	m.Load("maxRSS", &x.maxRSS)
	m.Load("childMaxRSS", &x.childMaxRSS)
	m.Load("limits", &x.limits)
	m.Load("processGroup", &x.processGroup)
	m.Load("execed", &x.execed)
	m.LoadValue("rscr", new(*RSEQCriticalRegion), func(y interface{}) { x.loadRscr(y.(*RSEQCriticalRegion)) })
}

func (x *ThreadID) save(m state.Map) {
	m.SaveValue("", (int32)(*x))
}

func (x *ThreadID) load(m state.Map) {
	m.LoadValue("", new(int32), func(y interface{}) { *x = (ThreadID)(y.(int32)) })
}

func (x *TaskSet) beforeSave() {}
func (x *TaskSet) save(m state.Map) {
	x.beforeSave()
	m.Save("Root", &x.Root)
	m.Save("sessions", &x.sessions)
}

func (x *TaskSet) afterLoad() {}
func (x *TaskSet) load(m state.Map) {
	m.Load("Root", &x.Root)
	m.Load("sessions", &x.sessions)
}

func (x *PIDNamespace) beforeSave() {}
func (x *PIDNamespace) save(m state.Map) {
	x.beforeSave()
	m.Save("owner", &x.owner)
	m.Save("parent", &x.parent)
	m.Save("userns", &x.userns)
	m.Save("last", &x.last)
	m.Save("tasks", &x.tasks)
	m.Save("tids", &x.tids)
	m.Save("sessions", &x.sessions)
	m.Save("sids", &x.sids)
	m.Save("processGroups", &x.processGroups)
	m.Save("pgids", &x.pgids)
	m.Save("exiting", &x.exiting)
}

func (x *PIDNamespace) afterLoad() {}
func (x *PIDNamespace) load(m state.Map) {
	m.Load("owner", &x.owner)
	m.Load("parent", &x.parent)
	m.Load("userns", &x.userns)
	m.Load("last", &x.last)
	m.Load("tasks", &x.tasks)
	m.Load("tids", &x.tids)
	m.Load("sessions", &x.sessions)
	m.Load("sids", &x.sids)
	m.Load("processGroups", &x.processGroups)
	m.Load("pgids", &x.pgids)
	m.Load("exiting", &x.exiting)
}

func (x *threadGroupNode) beforeSave() {}
func (x *threadGroupNode) save(m state.Map) {
	x.beforeSave()
	m.Save("pidns", &x.pidns)
	m.Save("leader", &x.leader)
	m.Save("execing", &x.execing)
	m.Save("tasks", &x.tasks)
	m.Save("tasksCount", &x.tasksCount)
	m.Save("liveTasks", &x.liveTasks)
	m.Save("activeTasks", &x.activeTasks)
}

func (x *threadGroupNode) afterLoad() {}
func (x *threadGroupNode) load(m state.Map) {
	m.Load("pidns", &x.pidns)
	m.Load("leader", &x.leader)
	m.Load("execing", &x.execing)
	m.Load("tasks", &x.tasks)
	m.Load("tasksCount", &x.tasksCount)
	m.Load("liveTasks", &x.liveTasks)
	m.Load("activeTasks", &x.activeTasks)
}

func (x *taskNode) beforeSave() {}
func (x *taskNode) save(m state.Map) {
	x.beforeSave()
	m.Save("tg", &x.tg)
	m.Save("taskEntry", &x.taskEntry)
	m.Save("parent", &x.parent)
	m.Save("children", &x.children)
	m.Save("childPIDNamespace", &x.childPIDNamespace)
}

func (x *taskNode) afterLoad() {}
func (x *taskNode) load(m state.Map) {
	m.LoadWait("tg", &x.tg)
	m.Load("taskEntry", &x.taskEntry)
	m.Load("parent", &x.parent)
	m.Load("children", &x.children)
	m.Load("childPIDNamespace", &x.childPIDNamespace)
}

func (x *Timekeeper) save(m state.Map) {
	x.beforeSave()
	m.Save("bootTime", &x.bootTime)
	m.Save("saveMonotonic", &x.saveMonotonic)
	m.Save("saveRealtime", &x.saveRealtime)
	m.Save("params", &x.params)
}

func (x *Timekeeper) load(m state.Map) {
	m.Load("bootTime", &x.bootTime)
	m.Load("saveMonotonic", &x.saveMonotonic)
	m.Load("saveRealtime", &x.saveRealtime)
	m.Load("params", &x.params)
	m.AfterLoad(x.afterLoad)
}

func (x *timekeeperClock) beforeSave() {}
func (x *timekeeperClock) save(m state.Map) {
	x.beforeSave()
	m.Save("tk", &x.tk)
	m.Save("c", &x.c)
}

func (x *timekeeperClock) afterLoad() {}
func (x *timekeeperClock) load(m state.Map) {
	m.Load("tk", &x.tk)
	m.Load("c", &x.c)
}

func (x *tgClock) beforeSave() {}
func (x *tgClock) save(m state.Map) {
	x.beforeSave()
	m.Save("tg", &x.tg)
	m.Save("includeSys", &x.includeSys)
}

func (x *tgClock) afterLoad() {}
func (x *tgClock) load(m state.Map) {
	m.Load("tg", &x.tg)
	m.Load("includeSys", &x.includeSys)
}

func (x *taskClock) beforeSave() {}
func (x *taskClock) save(m state.Map) {
	x.beforeSave()
	m.Save("t", &x.t)
	m.Save("includeSys", &x.includeSys)
}

func (x *taskClock) afterLoad() {}
func (x *taskClock) load(m state.Map) {
	m.Load("t", &x.t)
	m.Load("includeSys", &x.includeSys)
}

func (x *signalNotifier) beforeSave() {}
func (x *signalNotifier) save(m state.Map) {
	x.beforeSave()
	m.Save("tg", &x.tg)
	m.Save("signal", &x.signal)
	m.Save("realTimer", &x.realTimer)
	m.Save("includeSys", &x.includeSys)
}

func (x *signalNotifier) afterLoad() {}
func (x *signalNotifier) load(m state.Map) {
	m.Load("tg", &x.tg)
	m.Load("signal", &x.signal)
	m.Load("realTimer", &x.realTimer)
	m.Load("includeSys", &x.includeSys)
}

func (x *TimerManager) beforeSave() {}
func (x *TimerManager) save(m state.Map) {
	x.beforeSave()
	m.Save("virtClock", &x.virtClock)
	m.Save("profClock", &x.profClock)
	m.Save("RealTimer", &x.RealTimer)
	m.Save("VirtualTimer", &x.VirtualTimer)
	m.Save("ProfTimer", &x.ProfTimer)
	m.Save("SoftLimitTimer", &x.SoftLimitTimer)
	m.Save("HardLimitTimer", &x.HardLimitTimer)
}

func (x *TimerManager) afterLoad() {}
func (x *TimerManager) load(m state.Map) {
	m.Load("virtClock", &x.virtClock)
	m.Load("profClock", &x.profClock)
	m.Load("RealTimer", &x.RealTimer)
	m.Load("VirtualTimer", &x.VirtualTimer)
	m.Load("ProfTimer", &x.ProfTimer)
	m.Load("SoftLimitTimer", &x.SoftLimitTimer)
	m.Load("HardLimitTimer", &x.HardLimitTimer)
}

func (x *UTSNamespace) beforeSave() {}
func (x *UTSNamespace) save(m state.Map) {
	x.beforeSave()
	m.Save("hostName", &x.hostName)
	m.Save("domainName", &x.domainName)
	m.Save("userns", &x.userns)
}

func (x *UTSNamespace) afterLoad() {}
func (x *UTSNamespace) load(m state.Map) {
	m.Load("hostName", &x.hostName)
	m.Load("domainName", &x.domainName)
	m.Load("userns", &x.userns)
}

func (x *vdsoParams) beforeSave() {}
func (x *vdsoParams) save(m state.Map) {
	x.beforeSave()
	m.Save("monotonicReady", &x.monotonicReady)
	m.Save("monotonicBaseCycles", &x.monotonicBaseCycles)
	m.Save("monotonicBaseRef", &x.monotonicBaseRef)
	m.Save("monotonicFrequency", &x.monotonicFrequency)
	m.Save("realtimeReady", &x.realtimeReady)
	m.Save("realtimeBaseCycles", &x.realtimeBaseCycles)
	m.Save("realtimeBaseRef", &x.realtimeBaseRef)
	m.Save("realtimeFrequency", &x.realtimeFrequency)
}

func (x *vdsoParams) afterLoad() {}
func (x *vdsoParams) load(m state.Map) {
	m.Load("monotonicReady", &x.monotonicReady)
	m.Load("monotonicBaseCycles", &x.monotonicBaseCycles)
	m.Load("monotonicBaseRef", &x.monotonicBaseRef)
	m.Load("monotonicFrequency", &x.monotonicFrequency)
	m.Load("realtimeReady", &x.realtimeReady)
	m.Load("realtimeBaseCycles", &x.realtimeBaseCycles)
	m.Load("realtimeBaseRef", &x.realtimeBaseRef)
	m.Load("realtimeFrequency", &x.realtimeFrequency)
}

func (x *VDSOParamPage) beforeSave() {}
func (x *VDSOParamPage) save(m state.Map) {
	x.beforeSave()
	m.Save("platform", &x.platform)
	m.Save("fr", &x.fr)
	m.Save("seq", &x.seq)
}

func (x *VDSOParamPage) afterLoad() {}
func (x *VDSOParamPage) load(m state.Map) {
	m.Load("platform", &x.platform)
	m.Load("fr", &x.fr)
	m.Load("seq", &x.seq)
}

func (x *Version) beforeSave() {}
func (x *Version) save(m state.Map) {
	x.beforeSave()
	m.Save("Sysname", &x.Sysname)
	m.Save("Release", &x.Release)
	m.Save("Version", &x.Version)
}

func (x *Version) afterLoad() {}
func (x *Version) load(m state.Map) {
	m.Load("Sysname", &x.Sysname)
	m.Load("Release", &x.Release)
	m.Load("Version", &x.Version)
}

func init() {
	state.Register("kernel.abstractEndpoint", (*abstractEndpoint)(nil), state.Fns{Save: (*abstractEndpoint).save, Load: (*abstractEndpoint).load})
	state.Register("kernel.AbstractSocketNamespace", (*AbstractSocketNamespace)(nil), state.Fns{Save: (*AbstractSocketNamespace).save, Load: (*AbstractSocketNamespace).load})
	state.Register("kernel.boundEndpoint", (*boundEndpoint)(nil), state.Fns{Save: (*boundEndpoint).save, Load: (*boundEndpoint).load})
	state.Register("kernel.FDs", (*FDs)(nil), state.Fns{Save: (*FDs).save, Load: (*FDs).load})
	state.Register("kernel.FDFlags", (*FDFlags)(nil), state.Fns{Save: (*FDFlags).save, Load: (*FDFlags).load})
	state.Register("kernel.descriptor", (*descriptor)(nil), state.Fns{Save: (*descriptor).save, Load: (*descriptor).load})
	state.Register("kernel.FDMap", (*FDMap)(nil), state.Fns{Save: (*FDMap).save, Load: (*FDMap).load})
	state.Register("kernel.FSContext", (*FSContext)(nil), state.Fns{Save: (*FSContext).save, Load: (*FSContext).load})
	state.Register("kernel.IPCNamespace", (*IPCNamespace)(nil), state.Fns{Save: (*IPCNamespace).save, Load: (*IPCNamespace).load})
	state.Register("kernel.Kernel", (*Kernel)(nil), state.Fns{Save: (*Kernel).save, Load: (*Kernel).load})
	state.Register("kernel.InitKernelArgs", (*InitKernelArgs)(nil), state.Fns{Save: (*InitKernelArgs).save, Load: (*InitKernelArgs).load})
	state.Register("kernel.CreateProcessArgs", (*CreateProcessArgs)(nil), state.Fns{Save: (*CreateProcessArgs).save, Load: (*CreateProcessArgs).load})
	state.Register("kernel.createProcessContext", (*createProcessContext)(nil), state.Fns{Save: (*createProcessContext).save, Load: (*createProcessContext).load})
	state.Register("kernel.supervisorContext", (*supervisorContext)(nil), state.Fns{Save: (*supervisorContext).save, Load: (*supervisorContext).load})
	state.Register("kernel.kernelCPUClockListener", (*kernelCPUClockListener)(nil), state.Fns{Save: (*kernelCPUClockListener).save, Load: (*kernelCPUClockListener).load})
	state.Register("kernel.pendingSignals", (*pendingSignals)(nil), state.Fns{Save: (*pendingSignals).save, Load: (*pendingSignals).load})
	state.Register("kernel.pendingSignalQueue", (*pendingSignalQueue)(nil), state.Fns{Save: (*pendingSignalQueue).save, Load: (*pendingSignalQueue).load})
	state.Register("kernel.pendingSignal", (*pendingSignal)(nil), state.Fns{Save: (*pendingSignal).save, Load: (*pendingSignal).load})
	state.Register("kernel.pendingSignalList", (*pendingSignalList)(nil), state.Fns{Save: (*pendingSignalList).save, Load: (*pendingSignalList).load})
	state.Register("kernel.pendingSignalEntry", (*pendingSignalEntry)(nil), state.Fns{Save: (*pendingSignalEntry).save, Load: (*pendingSignalEntry).load})
	state.Register("kernel.processGroupList", (*processGroupList)(nil), state.Fns{Save: (*processGroupList).save, Load: (*processGroupList).load})
	state.Register("kernel.processGroupEntry", (*processGroupEntry)(nil), state.Fns{Save: (*processGroupEntry).save, Load: (*processGroupEntry).load})
	state.Register("kernel.ptraceOptions", (*ptraceOptions)(nil), state.Fns{Save: (*ptraceOptions).save, Load: (*ptraceOptions).load})
	state.Register("kernel.ptraceSyscallMode", (*ptraceSyscallMode)(nil), state.Fns{Save: (*ptraceSyscallMode).save, Load: (*ptraceSyscallMode).load})
	state.Register("kernel.ptraceStop", (*ptraceStop)(nil), state.Fns{Save: (*ptraceStop).save, Load: (*ptraceStop).load})
	state.Register("kernel.ptraceCloneKind", (*ptraceCloneKind)(nil), state.Fns{Save: (*ptraceCloneKind).save, Load: (*ptraceCloneKind).load})
	state.Register("kernel.RSEQCriticalRegion", (*RSEQCriticalRegion)(nil), state.Fns{Save: (*RSEQCriticalRegion).save, Load: (*RSEQCriticalRegion).load})
	state.Register("kernel.sessionList", (*sessionList)(nil), state.Fns{Save: (*sessionList).save, Load: (*sessionList).load})
	state.Register("kernel.sessionEntry", (*sessionEntry)(nil), state.Fns{Save: (*sessionEntry).save, Load: (*sessionEntry).load})
	state.Register("kernel.SessionID", (*SessionID)(nil), state.Fns{Save: (*SessionID).save, Load: (*SessionID).load})
	state.Register("kernel.ProcessGroupID", (*ProcessGroupID)(nil), state.Fns{Save: (*ProcessGroupID).save, Load: (*ProcessGroupID).load})
	state.Register("kernel.Session", (*Session)(nil), state.Fns{Save: (*Session).save, Load: (*Session).load})
	state.Register("kernel.ProcessGroup", (*ProcessGroup)(nil), state.Fns{Save: (*ProcessGroup).save, Load: (*ProcessGroup).load})
	state.Register("kernel.SignalHandlers", (*SignalHandlers)(nil), state.Fns{Save: (*SignalHandlers).save, Load: (*SignalHandlers).load})
	state.Register("kernel.SyscallFlagsTable", (*SyscallFlagsTable)(nil), state.Fns{Save: (*SyscallFlagsTable).save, Load: (*SyscallFlagsTable).load})
	state.Register("kernel.SyscallTable", (*SyscallTable)(nil), state.Fns{Save: (*SyscallTable).save, Load: (*SyscallTable).load})
	state.Register("kernel.syslog", (*syslog)(nil), state.Fns{Save: (*syslog).save, Load: (*syslog).load})
	state.Register("kernel.Task", (*Task)(nil), state.Fns{Save: (*Task).save, Load: (*Task).load})
	state.Register("kernel.SharingOptions", (*SharingOptions)(nil), state.Fns{Save: (*SharingOptions).save, Load: (*SharingOptions).load})
	state.Register("kernel.CloneOptions", (*CloneOptions)(nil), state.Fns{Save: (*CloneOptions).save, Load: (*CloneOptions).load})
	state.Register("kernel.runSyscallAfterPtraceEventClone", (*runSyscallAfterPtraceEventClone)(nil), state.Fns{Save: (*runSyscallAfterPtraceEventClone).save, Load: (*runSyscallAfterPtraceEventClone).load})
	state.Register("kernel.runSyscallAfterVforkStop", (*runSyscallAfterVforkStop)(nil), state.Fns{Save: (*runSyscallAfterVforkStop).save, Load: (*runSyscallAfterVforkStop).load})
	state.Register("kernel.vforkStop", (*vforkStop)(nil), state.Fns{Save: (*vforkStop).save, Load: (*vforkStop).load})
	state.Register("kernel.TaskContext", (*TaskContext)(nil), state.Fns{Save: (*TaskContext).save, Load: (*TaskContext).load})
	state.Register("kernel.execStop", (*execStop)(nil), state.Fns{Save: (*execStop).save, Load: (*execStop).load})
	state.Register("kernel.runSyscallAfterExecStop", (*runSyscallAfterExecStop)(nil), state.Fns{Save: (*runSyscallAfterExecStop).save, Load: (*runSyscallAfterExecStop).load})
	state.Register("kernel.ExitStatus", (*ExitStatus)(nil), state.Fns{Save: (*ExitStatus).save, Load: (*ExitStatus).load})
	state.Register("kernel.TaskExitState", (*TaskExitState)(nil), state.Fns{Save: (*TaskExitState).save, Load: (*TaskExitState).load})
	state.Register("kernel.runExit", (*runExit)(nil), state.Fns{Save: (*runExit).save, Load: (*runExit).load})
	state.Register("kernel.runExitMain", (*runExitMain)(nil), state.Fns{Save: (*runExitMain).save, Load: (*runExitMain).load})
	state.Register("kernel.runExitNotify", (*runExitNotify)(nil), state.Fns{Save: (*runExitNotify).save, Load: (*runExitNotify).load})
	state.Register("kernel.WaitOptions", (*WaitOptions)(nil), state.Fns{Save: (*WaitOptions).save, Load: (*WaitOptions).load})
	state.Register("kernel.WaitResult", (*WaitResult)(nil), state.Fns{Save: (*WaitResult).save, Load: (*WaitResult).load})
	state.Register("kernel.taskList", (*taskList)(nil), state.Fns{Save: (*taskList).save, Load: (*taskList).load})
	state.Register("kernel.taskEntry", (*taskEntry)(nil), state.Fns{Save: (*taskEntry).save, Load: (*taskEntry).load})
	state.Register("kernel.TaskResources", (*TaskResources)(nil), state.Fns{Save: (*TaskResources).save, Load: (*TaskResources).load})
	state.Register("kernel.runApp", (*runApp)(nil), state.Fns{Save: (*runApp).save, Load: (*runApp).load})
	state.Register("kernel.TaskGoroutineState", (*TaskGoroutineState)(nil), state.Fns{Save: (*TaskGoroutineState).save, Load: (*TaskGoroutineState).load})
	state.Register("kernel.TaskGoroutineSchedInfo", (*TaskGoroutineSchedInfo)(nil), state.Fns{Save: (*TaskGoroutineSchedInfo).save, Load: (*TaskGoroutineSchedInfo).load})
	state.Register("kernel.SignalAction", (*SignalAction)(nil), state.Fns{Save: (*SignalAction).save, Load: (*SignalAction).load})
	state.Register("kernel.groupStop", (*groupStop)(nil), state.Fns{Save: (*groupStop).save, Load: (*groupStop).load})
	state.Register("kernel.groupStopPhase", (*groupStopPhase)(nil), state.Fns{Save: (*groupStopPhase).save, Load: (*groupStopPhase).load})
	state.Register("kernel.runInterrupt", (*runInterrupt)(nil), state.Fns{Save: (*runInterrupt).save, Load: (*runInterrupt).load})
	state.Register("kernel.runInterruptAfterSignalDeliveryStop", (*runInterruptAfterSignalDeliveryStop)(nil), state.Fns{Save: (*runInterruptAfterSignalDeliveryStop).save, Load: (*runInterruptAfterSignalDeliveryStop).load})
	state.Register("kernel.TaskConfig", (*TaskConfig)(nil), state.Fns{Save: (*TaskConfig).save, Load: (*TaskConfig).load})
	state.Register("kernel.SyscallRestartErrno", (*SyscallRestartErrno)(nil), state.Fns{Save: (*SyscallRestartErrno).save, Load: (*SyscallRestartErrno).load})
	state.Register("kernel.SyscallControl", (*SyscallControl)(nil), state.Fns{Save: (*SyscallControl).save, Load: (*SyscallControl).load})
	state.Register("kernel.runSyscallAfterPtraceEventSeccomp", (*runSyscallAfterPtraceEventSeccomp)(nil), state.Fns{Save: (*runSyscallAfterPtraceEventSeccomp).save, Load: (*runSyscallAfterPtraceEventSeccomp).load})
	state.Register("kernel.runSyscallAfterSyscallEnterStop", (*runSyscallAfterSyscallEnterStop)(nil), state.Fns{Save: (*runSyscallAfterSyscallEnterStop).save, Load: (*runSyscallAfterSyscallEnterStop).load})
	state.Register("kernel.runSyscallAfterSysemuStop", (*runSyscallAfterSysemuStop)(nil), state.Fns{Save: (*runSyscallAfterSysemuStop).save, Load: (*runSyscallAfterSysemuStop).load})
	state.Register("kernel.runSyscallReinvoke", (*runSyscallReinvoke)(nil), state.Fns{Save: (*runSyscallReinvoke).save, Load: (*runSyscallReinvoke).load})
	state.Register("kernel.runSyscallExit", (*runSyscallExit)(nil), state.Fns{Save: (*runSyscallExit).save, Load: (*runSyscallExit).load})
	state.Register("kernel.runVsyscallAfterPtraceEventSeccomp", (*runVsyscallAfterPtraceEventSeccomp)(nil), state.Fns{Save: (*runVsyscallAfterPtraceEventSeccomp).save, Load: (*runVsyscallAfterPtraceEventSeccomp).load})
	state.Register("kernel.ThreadGroup", (*ThreadGroup)(nil), state.Fns{Save: (*ThreadGroup).save, Load: (*ThreadGroup).load})
	state.Register("kernel.ThreadID", (*ThreadID)(nil), state.Fns{Save: (*ThreadID).save, Load: (*ThreadID).load})
	state.Register("kernel.TaskSet", (*TaskSet)(nil), state.Fns{Save: (*TaskSet).save, Load: (*TaskSet).load})
	state.Register("kernel.PIDNamespace", (*PIDNamespace)(nil), state.Fns{Save: (*PIDNamespace).save, Load: (*PIDNamespace).load})
	state.Register("kernel.threadGroupNode", (*threadGroupNode)(nil), state.Fns{Save: (*threadGroupNode).save, Load: (*threadGroupNode).load})
	state.Register("kernel.taskNode", (*taskNode)(nil), state.Fns{Save: (*taskNode).save, Load: (*taskNode).load})
	state.Register("kernel.Timekeeper", (*Timekeeper)(nil), state.Fns{Save: (*Timekeeper).save, Load: (*Timekeeper).load})
	state.Register("kernel.timekeeperClock", (*timekeeperClock)(nil), state.Fns{Save: (*timekeeperClock).save, Load: (*timekeeperClock).load})
	state.Register("kernel.tgClock", (*tgClock)(nil), state.Fns{Save: (*tgClock).save, Load: (*tgClock).load})
	state.Register("kernel.taskClock", (*taskClock)(nil), state.Fns{Save: (*taskClock).save, Load: (*taskClock).load})
	state.Register("kernel.signalNotifier", (*signalNotifier)(nil), state.Fns{Save: (*signalNotifier).save, Load: (*signalNotifier).load})
	state.Register("kernel.TimerManager", (*TimerManager)(nil), state.Fns{Save: (*TimerManager).save, Load: (*TimerManager).load})
	state.Register("kernel.UTSNamespace", (*UTSNamespace)(nil), state.Fns{Save: (*UTSNamespace).save, Load: (*UTSNamespace).load})
	state.Register("kernel.vdsoParams", (*vdsoParams)(nil), state.Fns{Save: (*vdsoParams).save, Load: (*vdsoParams).load})
	state.Register("kernel.VDSOParamPage", (*VDSOParamPage)(nil), state.Fns{Save: (*VDSOParamPage).save, Load: (*VDSOParamPage).load})
	state.Register("kernel.Version", (*Version)(nil), state.Fns{Save: (*Version).save, Load: (*Version).load})
}
