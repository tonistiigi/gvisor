// automatically generated by stateify.

package epoll

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *Event) beforeSave() {}
func (x *Event) save(m state.Map) {
	x.beforeSave()
	m.Save("Events", &x.Events)
	m.Save("Data", &x.Data)
}

func (x *Event) afterLoad() {}
func (x *Event) load(m state.Map) {
	m.Load("Events", &x.Events)
	m.Load("Data", &x.Data)
}

func (x *EntryFlags) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *EntryFlags) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (EntryFlags)(y.(int)) })
}

func (x *FileIdentifier) beforeSave() {}
func (x *FileIdentifier) save(m state.Map) {
	x.beforeSave()
	m.Save("File", &x.File)
	m.Save("Fd", &x.Fd)
}

func (x *FileIdentifier) afterLoad() {}
func (x *FileIdentifier) load(m state.Map) {
	m.Load("File", &x.File)
	m.Load("Fd", &x.Fd)
}

func (x *pollEntry) beforeSave() {}
func (x *pollEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("Entry", &x.Entry)
	m.Save("id", &x.id)
	m.Save("userData", &x.userData)
	m.Save("mask", &x.mask)
	m.Save("flags", &x.flags)
	m.Save("epoll", &x.epoll)
}

func (x *pollEntry) load(m state.Map) {
	m.Load("Entry", &x.Entry)
	m.LoadWait("id", &x.id)
	m.Load("userData", &x.userData)
	m.Load("mask", &x.mask)
	m.Load("flags", &x.flags)
	m.Load("epoll", &x.epoll)
	m.AfterLoad(x.afterLoad)
}

func (x *EventPoll) beforeSave() {}
func (x *EventPoll) save(m state.Map) {
	x.beforeSave()
	if !state.IsZeroValue(x.PipeSeek) { m.Failf("PipeSeek is %v, expected zero", x.PipeSeek) }
	if !state.IsZeroValue(x.NotDirReaddir) { m.Failf("NotDirReaddir is %v, expected zero", x.NotDirReaddir) }
	if !state.IsZeroValue(x.NoFsync) { m.Failf("NoFsync is %v, expected zero", x.NoFsync) }
	if !state.IsZeroValue(x.NoopFlush) { m.Failf("NoopFlush is %v, expected zero", x.NoopFlush) }
	if !state.IsZeroValue(x.NoMMap) { m.Failf("NoMMap is %v, expected zero", x.NoMMap) }
	if !state.IsZeroValue(x.NoIoctl) { m.Failf("NoIoctl is %v, expected zero", x.NoIoctl) }
	m.Save("Queue", &x.Queue)
	m.Save("files", &x.files)
	m.Save("readyList", &x.readyList)
	m.Save("waitingList", &x.waitingList)
	m.Save("disabledList", &x.disabledList)
}

func (x *EventPoll) load(m state.Map) {
	m.Load("Queue", &x.Queue)
	m.Load("files", &x.files)
	m.Load("readyList", &x.readyList)
	m.Load("waitingList", &x.waitingList)
	m.Load("disabledList", &x.disabledList)
	m.AfterLoad(x.afterLoad)
}

func (x *readyCallback) beforeSave() {}
func (x *readyCallback) save(m state.Map) {
	x.beforeSave()
}

func (x *readyCallback) afterLoad() {}
func (x *readyCallback) load(m state.Map) {
}

func init() {
	state.Register("epoll.Event", (*Event)(nil), state.Fns{Save: (*Event).save, Load: (*Event).load})
	state.Register("epoll.EntryFlags", (*EntryFlags)(nil), state.Fns{Save: (*EntryFlags).save, Load: (*EntryFlags).load})
	state.Register("epoll.FileIdentifier", (*FileIdentifier)(nil), state.Fns{Save: (*FileIdentifier).save, Load: (*FileIdentifier).load})
	state.Register("epoll.pollEntry", (*pollEntry)(nil), state.Fns{Save: (*pollEntry).save, Load: (*pollEntry).load})
	state.Register("epoll.EventPoll", (*EventPoll)(nil), state.Fns{Save: (*EventPoll).save, Load: (*EventPoll).load})
	state.Register("epoll.readyCallback", (*readyCallback)(nil), state.Fns{Save: (*readyCallback).save, Load: (*readyCallback).load})
}
