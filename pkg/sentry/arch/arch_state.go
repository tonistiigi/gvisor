// automatically generated by stateify.

package arch

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *Arch) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *Arch) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (Arch)(y.(int)) })
}

func (x *FloatingPointData) save(m state.Map) {
	m.SaveValue("", (byte)(*x))
}

func (x *FloatingPointData) load(m state.Map) {
	m.LoadValue("", new(byte), func(y interface{}) { *x = (FloatingPointData)(y.(byte)) })
}

func (x *MmapDirection) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *MmapDirection) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (MmapDirection)(y.(int)) })
}

func (x *MmapLayout) beforeSave() {}
func (x *MmapLayout) save(m state.Map) {
	x.beforeSave()
	m.Save("MinAddr", &x.MinAddr)
	m.Save("MaxAddr", &x.MaxAddr)
	m.Save("BottomUpBase", &x.BottomUpBase)
	m.Save("TopDownBase", &x.TopDownBase)
	m.Save("DefaultDirection", &x.DefaultDirection)
	m.Save("MaxStackRand", &x.MaxStackRand)
}

func (x *MmapLayout) afterLoad() {}
func (x *MmapLayout) load(m state.Map) {
	m.Load("MinAddr", &x.MinAddr)
	m.Load("MaxAddr", &x.MaxAddr)
	m.Load("BottomUpBase", &x.BottomUpBase)
	m.Load("TopDownBase", &x.TopDownBase)
	m.Load("DefaultDirection", &x.DefaultDirection)
	m.Load("MaxStackRand", &x.MaxStackRand)
}

func (x *SyscallArgument) beforeSave() {}
func (x *SyscallArgument) save(m state.Map) {
	x.beforeSave()
	m.Save("Value", &x.Value)
}

func (x *SyscallArgument) afterLoad() {}
func (x *SyscallArgument) load(m state.Map) {
	m.Load("Value", &x.Value)
}

func (x *SyscallArguments) save(m state.Map) {
	m.SaveValue("", ([6]SyscallArgument)(*x))
}

func (x *SyscallArguments) load(m state.Map) {
	m.LoadValue("", new([6]SyscallArgument), func(y interface{}) { *x = (SyscallArguments)(y.([6]SyscallArgument)) })
}

func (x *context64) beforeSave() {}
func (x *context64) save(m state.Map) {
	x.beforeSave()
	m.Save("State", &x.State)
	m.Save("sigFPState", &x.sigFPState)
}

func (x *context64) afterLoad() {}
func (x *context64) load(m state.Map) {
	m.Load("State", &x.State)
	m.Load("sigFPState", &x.sigFPState)
}

func (x *syscallPtraceRegs) beforeSave() {}
func (x *syscallPtraceRegs) save(m state.Map) {
	x.beforeSave()
	m.Save("R15", &x.R15)
	m.Save("R14", &x.R14)
	m.Save("R13", &x.R13)
	m.Save("R12", &x.R12)
	m.Save("Rbp", &x.Rbp)
	m.Save("Rbx", &x.Rbx)
	m.Save("R11", &x.R11)
	m.Save("R10", &x.R10)
	m.Save("R9", &x.R9)
	m.Save("R8", &x.R8)
	m.Save("Rax", &x.Rax)
	m.Save("Rcx", &x.Rcx)
	m.Save("Rdx", &x.Rdx)
	m.Save("Rsi", &x.Rsi)
	m.Save("Rdi", &x.Rdi)
	m.Save("Orig_rax", &x.Orig_rax)
	m.Save("Rip", &x.Rip)
	m.Save("Cs", &x.Cs)
	m.Save("Eflags", &x.Eflags)
	m.Save("Rsp", &x.Rsp)
	m.Save("Ss", &x.Ss)
	m.Save("Fs_base", &x.Fs_base)
	m.Save("Gs_base", &x.Gs_base)
	m.Save("Ds", &x.Ds)
	m.Save("Es", &x.Es)
	m.Save("Fs", &x.Fs)
	m.Save("Gs", &x.Gs)
}

func (x *syscallPtraceRegs) afterLoad() {}
func (x *syscallPtraceRegs) load(m state.Map) {
	m.Load("R15", &x.R15)
	m.Load("R14", &x.R14)
	m.Load("R13", &x.R13)
	m.Load("R12", &x.R12)
	m.Load("Rbp", &x.Rbp)
	m.Load("Rbx", &x.Rbx)
	m.Load("R11", &x.R11)
	m.Load("R10", &x.R10)
	m.Load("R9", &x.R9)
	m.Load("R8", &x.R8)
	m.Load("Rax", &x.Rax)
	m.Load("Rcx", &x.Rcx)
	m.Load("Rdx", &x.Rdx)
	m.Load("Rsi", &x.Rsi)
	m.Load("Rdi", &x.Rdi)
	m.Load("Orig_rax", &x.Orig_rax)
	m.Load("Rip", &x.Rip)
	m.Load("Cs", &x.Cs)
	m.Load("Eflags", &x.Eflags)
	m.Load("Rsp", &x.Rsp)
	m.Load("Ss", &x.Ss)
	m.Load("Fs_base", &x.Fs_base)
	m.Load("Gs_base", &x.Gs_base)
	m.Load("Ds", &x.Ds)
	m.Load("Es", &x.Es)
	m.Load("Fs", &x.Fs)
	m.Load("Gs", &x.Gs)
}

func (x *x86FPState) save(m state.Map) {
	m.SaveValue("", ([]byte)(*x))
}

func (x *x86FPState) load(m state.Map) {
	m.LoadValue("", new([]byte), func(y interface{}) { *x = (x86FPState)(y.([]byte)) })
}

func (x *State) beforeSave() {}
func (x *State) save(m state.Map) {
	x.beforeSave()
	var Regs syscallPtraceRegs = x.saveRegs()
	m.SaveValue("Regs", Regs)
	m.Save("x86FPState", &x.x86FPState)
	m.Save("FeatureSet", &x.FeatureSet)
}

func (x *State) load(m state.Map) {
	m.LoadWait("x86FPState", &x.x86FPState)
	m.Load("FeatureSet", &x.FeatureSet)
	m.LoadValue("Regs", new(syscallPtraceRegs), func(y interface{}) { x.loadRegs(y.(syscallPtraceRegs)) })
	m.AfterLoad(x.afterLoad)
}

func (x *AuxEntry) beforeSave() {}
func (x *AuxEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("Key", &x.Key)
	m.Save("Value", &x.Value)
}

func (x *AuxEntry) afterLoad() {}
func (x *AuxEntry) load(m state.Map) {
	m.Load("Key", &x.Key)
	m.Load("Value", &x.Value)
}

func (x *Auxv) save(m state.Map) {
	m.SaveValue("", ([]AuxEntry)(*x))
}

func (x *Auxv) load(m state.Map) {
	m.LoadValue("", new([]AuxEntry), func(y interface{}) { *x = (Auxv)(y.([]AuxEntry)) })
}

func (x *SignalAct) beforeSave() {}
func (x *SignalAct) save(m state.Map) {
	x.beforeSave()
	m.Save("Handler", &x.Handler)
	m.Save("Flags", &x.Flags)
	m.Save("Restorer", &x.Restorer)
	m.Save("Mask", &x.Mask)
}

func (x *SignalAct) afterLoad() {}
func (x *SignalAct) load(m state.Map) {
	m.Load("Handler", &x.Handler)
	m.Load("Flags", &x.Flags)
	m.Load("Restorer", &x.Restorer)
	m.Load("Mask", &x.Mask)
}

func (x *SignalStack) beforeSave() {}
func (x *SignalStack) save(m state.Map) {
	x.beforeSave()
	m.Save("Addr", &x.Addr)
	m.Save("Flags", &x.Flags)
	m.Save("Size", &x.Size)
}

func (x *SignalStack) afterLoad() {}
func (x *SignalStack) load(m state.Map) {
	m.Load("Addr", &x.Addr)
	m.Load("Flags", &x.Flags)
	m.Load("Size", &x.Size)
}

func (x *SignalInfo) beforeSave() {}
func (x *SignalInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Signo", &x.Signo)
	m.Save("Errno", &x.Errno)
	m.Save("Code", &x.Code)
	m.Save("Fields", &x.Fields)
}

func (x *SignalInfo) afterLoad() {}
func (x *SignalInfo) load(m state.Map) {
	m.Load("Signo", &x.Signo)
	m.Load("Errno", &x.Errno)
	m.Load("Code", &x.Code)
	m.Load("Fields", &x.Fields)
}

func (x *SignalContext64) beforeSave() {}
func (x *SignalContext64) save(m state.Map) {
	x.beforeSave()
	m.Save("R8", &x.R8)
	m.Save("R9", &x.R9)
	m.Save("R10", &x.R10)
	m.Save("R11", &x.R11)
	m.Save("R12", &x.R12)
	m.Save("R13", &x.R13)
	m.Save("R14", &x.R14)
	m.Save("R15", &x.R15)
	m.Save("Rdi", &x.Rdi)
	m.Save("Rsi", &x.Rsi)
	m.Save("Rbp", &x.Rbp)
	m.Save("Rbx", &x.Rbx)
	m.Save("Rdx", &x.Rdx)
	m.Save("Rax", &x.Rax)
	m.Save("Rcx", &x.Rcx)
	m.Save("Rsp", &x.Rsp)
	m.Save("Rip", &x.Rip)
	m.Save("Eflags", &x.Eflags)
	m.Save("Cs", &x.Cs)
	m.Save("Gs", &x.Gs)
	m.Save("Fs", &x.Fs)
	m.Save("Ss", &x.Ss)
	m.Save("Err", &x.Err)
	m.Save("Trapno", &x.Trapno)
	m.Save("Oldmask", &x.Oldmask)
	m.Save("Cr2", &x.Cr2)
	m.Save("Fpstate", &x.Fpstate)
	m.Save("Reserved", &x.Reserved)
}

func (x *SignalContext64) afterLoad() {}
func (x *SignalContext64) load(m state.Map) {
	m.Load("R8", &x.R8)
	m.Load("R9", &x.R9)
	m.Load("R10", &x.R10)
	m.Load("R11", &x.R11)
	m.Load("R12", &x.R12)
	m.Load("R13", &x.R13)
	m.Load("R14", &x.R14)
	m.Load("R15", &x.R15)
	m.Load("Rdi", &x.Rdi)
	m.Load("Rsi", &x.Rsi)
	m.Load("Rbp", &x.Rbp)
	m.Load("Rbx", &x.Rbx)
	m.Load("Rdx", &x.Rdx)
	m.Load("Rax", &x.Rax)
	m.Load("Rcx", &x.Rcx)
	m.Load("Rsp", &x.Rsp)
	m.Load("Rip", &x.Rip)
	m.Load("Eflags", &x.Eflags)
	m.Load("Cs", &x.Cs)
	m.Load("Gs", &x.Gs)
	m.Load("Fs", &x.Fs)
	m.Load("Ss", &x.Ss)
	m.Load("Err", &x.Err)
	m.Load("Trapno", &x.Trapno)
	m.Load("Oldmask", &x.Oldmask)
	m.Load("Cr2", &x.Cr2)
	m.Load("Fpstate", &x.Fpstate)
	m.Load("Reserved", &x.Reserved)
}

func (x *UContext64) beforeSave() {}
func (x *UContext64) save(m state.Map) {
	x.beforeSave()
	m.Save("Flags", &x.Flags)
	m.Save("Link", &x.Link)
	m.Save("Stack", &x.Stack)
	m.Save("MContext", &x.MContext)
	m.Save("Sigset", &x.Sigset)
}

func (x *UContext64) afterLoad() {}
func (x *UContext64) load(m state.Map) {
	m.Load("Flags", &x.Flags)
	m.Load("Link", &x.Link)
	m.Load("Stack", &x.Stack)
	m.Load("MContext", &x.MContext)
	m.Load("Sigset", &x.Sigset)
}

func init() {
	state.Register("arch.Arch", (*Arch)(nil), state.Fns{Save: (*Arch).save, Load: (*Arch).load})
	state.Register("arch.FloatingPointData", (*FloatingPointData)(nil), state.Fns{Save: (*FloatingPointData).save, Load: (*FloatingPointData).load})
	state.Register("arch.MmapDirection", (*MmapDirection)(nil), state.Fns{Save: (*MmapDirection).save, Load: (*MmapDirection).load})
	state.Register("arch.MmapLayout", (*MmapLayout)(nil), state.Fns{Save: (*MmapLayout).save, Load: (*MmapLayout).load})
	state.Register("arch.SyscallArgument", (*SyscallArgument)(nil), state.Fns{Save: (*SyscallArgument).save, Load: (*SyscallArgument).load})
	state.Register("arch.SyscallArguments", (*SyscallArguments)(nil), state.Fns{Save: (*SyscallArguments).save, Load: (*SyscallArguments).load})
	state.Register("arch.context64", (*context64)(nil), state.Fns{Save: (*context64).save, Load: (*context64).load})
	state.Register("arch.syscallPtraceRegs", (*syscallPtraceRegs)(nil), state.Fns{Save: (*syscallPtraceRegs).save, Load: (*syscallPtraceRegs).load})
	state.Register("arch.x86FPState", (*x86FPState)(nil), state.Fns{Save: (*x86FPState).save, Load: (*x86FPState).load})
	state.Register("arch.State", (*State)(nil), state.Fns{Save: (*State).save, Load: (*State).load})
	state.Register("arch.AuxEntry", (*AuxEntry)(nil), state.Fns{Save: (*AuxEntry).save, Load: (*AuxEntry).load})
	state.Register("arch.Auxv", (*Auxv)(nil), state.Fns{Save: (*Auxv).save, Load: (*Auxv).load})
	state.Register("arch.SignalAct", (*SignalAct)(nil), state.Fns{Save: (*SignalAct).save, Load: (*SignalAct).load})
	state.Register("arch.SignalStack", (*SignalStack)(nil), state.Fns{Save: (*SignalStack).save, Load: (*SignalStack).load})
	state.Register("arch.SignalInfo", (*SignalInfo)(nil), state.Fns{Save: (*SignalInfo).save, Load: (*SignalInfo).load})
	state.Register("arch.SignalContext64", (*SignalContext64)(nil), state.Fns{Save: (*SignalContext64).save, Load: (*SignalContext64).load})
	state.Register("arch.UContext64", (*UContext64)(nil), state.Fns{Save: (*UContext64).save, Load: (*UContext64).load})
}
