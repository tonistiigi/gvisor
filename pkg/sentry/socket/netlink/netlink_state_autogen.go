// automatically generated by stateify.

package netlink

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *Socket) beforeSave() {}
func (x *Socket) save(m state.Map) {
	x.beforeSave()
	m.Save("SendReceiveTimeout", &x.SendReceiveTimeout)
	m.Save("ports", &x.ports)
	m.Save("protocol", &x.protocol)
	m.Save("ep", &x.ep)
	m.Save("connection", &x.connection)
	m.Save("bound", &x.bound)
	m.Save("portID", &x.portID)
	m.Save("sendBufferSize", &x.sendBufferSize)
}

func (x *Socket) afterLoad() {}
func (x *Socket) load(m state.Map) {
	m.Load("SendReceiveTimeout", &x.SendReceiveTimeout)
	m.Load("ports", &x.ports)
	m.Load("protocol", &x.protocol)
	m.Load("ep", &x.ep)
	m.Load("connection", &x.connection)
	m.Load("bound", &x.bound)
	m.Load("portID", &x.portID)
	m.Load("sendBufferSize", &x.sendBufferSize)
}

func init() {
	state.Register("netlink.Socket", (*Socket)(nil), state.Fns{Save: (*Socket).save, Load: (*Socket).load})
}
