// automatically generated by stateify.

package hostinet

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *socketOperations) save(m state.Map) {
	x.beforeSave()
	m.Save("ReceiveTimeout", &x.ReceiveTimeout)
	m.Save("fd", &x.fd)
	m.Save("queue", &x.queue)
}

func (x *socketOperations) afterLoad() {}
func (x *socketOperations) load(m state.Map) {
	m.Load("ReceiveTimeout", &x.ReceiveTimeout)
	m.Load("fd", &x.fd)
	m.Load("queue", &x.queue)
}

func (x *socketProvider) beforeSave() {}
func (x *socketProvider) save(m state.Map) {
	x.beforeSave()
	m.Save("family", &x.family)
}

func (x *socketProvider) afterLoad() {}
func (x *socketProvider) load(m state.Map) {
	m.Load("family", &x.family)
}

func (x *Stack) beforeSave() {}
func (x *Stack) save(m state.Map) {
	x.beforeSave()
	m.Save("interfaces", &x.interfaces)
	m.Save("interfaceAddrs", &x.interfaceAddrs)
	m.Save("supportsIPv6", &x.supportsIPv6)
	m.Save("tcpRecvBufSize", &x.tcpRecvBufSize)
	m.Save("tcpSendBufSize", &x.tcpSendBufSize)
	m.Save("tcpSACKEnabled", &x.tcpSACKEnabled)
}

func (x *Stack) afterLoad() {}
func (x *Stack) load(m state.Map) {
	m.Load("interfaces", &x.interfaces)
	m.Load("interfaceAddrs", &x.interfaceAddrs)
	m.Load("supportsIPv6", &x.supportsIPv6)
	m.Load("tcpRecvBufSize", &x.tcpRecvBufSize)
	m.Load("tcpSendBufSize", &x.tcpSendBufSize)
	m.Load("tcpSACKEnabled", &x.tcpSACKEnabled)
}

func init() {
	state.Register("hostinet.socketOperations", (*socketOperations)(nil), state.Fns{Save: (*socketOperations).save, Load: (*socketOperations).load})
	state.Register("hostinet.socketProvider", (*socketProvider)(nil), state.Fns{Save: (*socketProvider).save, Load: (*socketProvider).load})
	state.Register("hostinet.Stack", (*Stack)(nil), state.Fns{Save: (*Stack).save, Load: (*Stack).load})
}
