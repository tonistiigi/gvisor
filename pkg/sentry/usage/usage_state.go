// automatically generated by stateify.

package usage

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *CPUStats) beforeSave() {}
func (x *CPUStats) save(m state.Map) {
	x.beforeSave()
	m.Save("UserTime", &x.UserTime)
	m.Save("SysTime", &x.SysTime)
	m.Save("VoluntarySwitches", &x.VoluntarySwitches)
}

func (x *CPUStats) afterLoad() {}
func (x *CPUStats) load(m state.Map) {
	m.Load("UserTime", &x.UserTime)
	m.Load("SysTime", &x.SysTime)
	m.Load("VoluntarySwitches", &x.VoluntarySwitches)
}

func (x *IO) beforeSave() {}
func (x *IO) save(m state.Map) {
	x.beforeSave()
	m.Save("CharsRead", &x.CharsRead)
	m.Save("CharsWritten", &x.CharsWritten)
	m.Save("ReadSyscalls", &x.ReadSyscalls)
	m.Save("WriteSyscalls", &x.WriteSyscalls)
	m.Save("BytesRead", &x.BytesRead)
	m.Save("BytesWritten", &x.BytesWritten)
	m.Save("BytesWriteCancelled", &x.BytesWriteCancelled)
}

func (x *IO) afterLoad() {}
func (x *IO) load(m state.Map) {
	m.Load("CharsRead", &x.CharsRead)
	m.Load("CharsWritten", &x.CharsWritten)
	m.Load("ReadSyscalls", &x.ReadSyscalls)
	m.Load("WriteSyscalls", &x.WriteSyscalls)
	m.Load("BytesRead", &x.BytesRead)
	m.Load("BytesWritten", &x.BytesWritten)
	m.Load("BytesWriteCancelled", &x.BytesWriteCancelled)
}

func (x *MemoryKind) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *MemoryKind) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (MemoryKind)(y.(int)) })
}

func (x *MemoryStats) beforeSave() {}
func (x *MemoryStats) save(m state.Map) {
	x.beforeSave()
	m.Save("System", &x.System)
	m.Save("Anonymous", &x.Anonymous)
	m.Save("PageCache", &x.PageCache)
	m.Save("Tmpfs", &x.Tmpfs)
	m.Save("Mapped", &x.Mapped)
	m.Save("Ramdiskfs", &x.Ramdiskfs)
}

func (x *MemoryStats) afterLoad() {}
func (x *MemoryStats) load(m state.Map) {
	m.Load("System", &x.System)
	m.Load("Anonymous", &x.Anonymous)
	m.Load("PageCache", &x.PageCache)
	m.Load("Tmpfs", &x.Tmpfs)
	m.Load("Mapped", &x.Mapped)
	m.Load("Ramdiskfs", &x.Ramdiskfs)
}

func (x *RTMemoryStats) beforeSave() {}
func (x *RTMemoryStats) save(m state.Map) {
	x.beforeSave()
	m.Save("RTMapped", &x.RTMapped)
}

func (x *RTMemoryStats) afterLoad() {}
func (x *RTMemoryStats) load(m state.Map) {
	m.Load("RTMapped", &x.RTMapped)
}

func (x *MemoryLocked) beforeSave() {}
func (x *MemoryLocked) save(m state.Map) {
	x.beforeSave()
	m.Save("mu", &x.mu)
	m.Save("MemoryStats", &x.MemoryStats)
	m.Save("RTMemoryStats", &x.RTMemoryStats)
	m.Save("File", &x.File)
}

func (x *MemoryLocked) afterLoad() {}
func (x *MemoryLocked) load(m state.Map) {
	m.Load("mu", &x.mu)
	m.Load("MemoryStats", &x.MemoryStats)
	m.Load("RTMemoryStats", &x.RTMemoryStats)
	m.Load("File", &x.File)
}

func init() {
	state.Register("usage.CPUStats", (*CPUStats)(nil), state.Fns{Save: (*CPUStats).save, Load: (*CPUStats).load})
	state.Register("usage.IO", (*IO)(nil), state.Fns{Save: (*IO).save, Load: (*IO).load})
	state.Register("usage.MemoryKind", (*MemoryKind)(nil), state.Fns{Save: (*MemoryKind).save, Load: (*MemoryKind).load})
	state.Register("usage.MemoryStats", (*MemoryStats)(nil), state.Fns{Save: (*MemoryStats).save, Load: (*MemoryStats).load})
	state.Register("usage.RTMemoryStats", (*RTMemoryStats)(nil), state.Fns{Save: (*RTMemoryStats).save, Load: (*RTMemoryStats).load})
	state.Register("usage.MemoryLocked", (*MemoryLocked)(nil), state.Fns{Save: (*MemoryLocked).save, Load: (*MemoryLocked).load})
}
