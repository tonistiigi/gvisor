// automatically generated by stateify.

package waiter

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *EventMask) save(m state.Map) {
	m.SaveValue("", (uint16)(*x))
}

func (x *EventMask) load(m state.Map) {
	m.LoadValue("", new(uint16), func(y interface{}) { *x = (EventMask)(y.(uint16)) })
}

func (x *Entry) beforeSave() {}
func (x *Entry) save(m state.Map) {
	x.beforeSave()
	m.Save("Context", &x.Context)
	m.Save("Callback", &x.Callback)
	m.Save("mask", &x.mask)
	m.Save("Entry", &x.Entry)
}

func (x *Entry) afterLoad() {}
func (x *Entry) load(m state.Map) {
	m.Load("Context", &x.Context)
	m.Load("Callback", &x.Callback)
	m.Load("mask", &x.mask)
	m.Load("Entry", &x.Entry)
}

func (x *channelCallback) beforeSave() {}
func (x *channelCallback) save(m state.Map) {
	x.beforeSave()
}

func (x *channelCallback) afterLoad() {}
func (x *channelCallback) load(m state.Map) {
}

func (x *Queue) beforeSave() {}
func (x *Queue) save(m state.Map) {
	x.beforeSave()
	if !state.IsZeroValue(x.list) { m.Failf("list is %v, expected zero", x.list) }
}

func (x *Queue) afterLoad() {}
func (x *Queue) load(m state.Map) {
}

func (x *AlwaysReady) beforeSave() {}
func (x *AlwaysReady) save(m state.Map) {
	x.beforeSave()
}

func (x *AlwaysReady) afterLoad() {}
func (x *AlwaysReady) load(m state.Map) {
}

func init() {
	state.Register("waiter.EventMask", (*EventMask)(nil), state.Fns{Save: (*EventMask).save, Load: (*EventMask).load})
	state.Register("waiter.Entry", (*Entry)(nil), state.Fns{Save: (*Entry).save, Load: (*Entry).load})
	state.Register("waiter.channelCallback", (*channelCallback)(nil), state.Fns{Save: (*channelCallback).save, Load: (*channelCallback).load})
	state.Register("waiter.Queue", (*Queue)(nil), state.Fns{Save: (*Queue).save, Load: (*Queue).load})
	state.Register("waiter.AlwaysReady", (*AlwaysReady)(nil), state.Fns{Save: (*AlwaysReady).save, Load: (*AlwaysReady).load})
}
