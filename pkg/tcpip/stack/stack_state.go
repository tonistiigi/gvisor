// automatically generated by stateify.

package stack

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *NetworkEndpointID) beforeSave() {}
func (x *NetworkEndpointID) save(m state.Map) {
	x.beforeSave()
	m.Save("LocalAddress", &x.LocalAddress)
}

func (x *NetworkEndpointID) afterLoad() {}
func (x *NetworkEndpointID) load(m state.Map) {
	m.Load("LocalAddress", &x.LocalAddress)
}

func (x *TransportEndpointID) beforeSave() {}
func (x *TransportEndpointID) save(m state.Map) {
	x.beforeSave()
	m.Save("LocalPort", &x.LocalPort)
	m.Save("LocalAddress", &x.LocalAddress)
	m.Save("RemotePort", &x.RemotePort)
	m.Save("RemoteAddress", &x.RemoteAddress)
}

func (x *TransportEndpointID) afterLoad() {}
func (x *TransportEndpointID) load(m state.Map) {
	m.Load("LocalPort", &x.LocalPort)
	m.Load("LocalAddress", &x.LocalAddress)
	m.Load("RemotePort", &x.RemotePort)
	m.Load("RemoteAddress", &x.RemoteAddress)
}

func (x *ControlType) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *ControlType) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (ControlType)(y.(int)) })
}

func (x *LinkEndpointCapabilities) save(m state.Map) {
	m.SaveValue("", (uint)(*x))
}

func (x *LinkEndpointCapabilities) load(m state.Map) {
	m.LoadValue("", new(uint), func(y interface{}) { *x = (LinkEndpointCapabilities)(y.(uint)) })
}

func (x *transportProtocolState) beforeSave() {}
func (x *transportProtocolState) save(m state.Map) {
	x.beforeSave()
	m.Save("proto", &x.proto)
	m.Save("defaultHandler", &x.defaultHandler)
}

func (x *transportProtocolState) afterLoad() {}
func (x *transportProtocolState) load(m state.Map) {
	m.Load("proto", &x.proto)
	m.Load("defaultHandler", &x.defaultHandler)
}

func (x *TCPEndpointID) beforeSave() {}
func (x *TCPEndpointID) save(m state.Map) {
	x.beforeSave()
	m.Save("LocalPort", &x.LocalPort)
	m.Save("LocalAddress", &x.LocalAddress)
	m.Save("RemotePort", &x.RemotePort)
	m.Save("RemoteAddress", &x.RemoteAddress)
}

func (x *TCPEndpointID) afterLoad() {}
func (x *TCPEndpointID) load(m state.Map) {
	m.Load("LocalPort", &x.LocalPort)
	m.Load("LocalAddress", &x.LocalAddress)
	m.Load("RemotePort", &x.RemotePort)
	m.Load("RemoteAddress", &x.RemoteAddress)
}

func (x *TCPFastRecoveryState) beforeSave() {}
func (x *TCPFastRecoveryState) save(m state.Map) {
	x.beforeSave()
	m.Save("Active", &x.Active)
	m.Save("First", &x.First)
	m.Save("Last", &x.Last)
	m.Save("MaxCwnd", &x.MaxCwnd)
}

func (x *TCPFastRecoveryState) afterLoad() {}
func (x *TCPFastRecoveryState) load(m state.Map) {
	m.Load("Active", &x.Active)
	m.Load("First", &x.First)
	m.Load("Last", &x.Last)
	m.Load("MaxCwnd", &x.MaxCwnd)
}

func (x *TCPReceiverState) beforeSave() {}
func (x *TCPReceiverState) save(m state.Map) {
	x.beforeSave()
	m.Save("RcvNxt", &x.RcvNxt)
	m.Save("RcvAcc", &x.RcvAcc)
	m.Save("RcvWndScale", &x.RcvWndScale)
	m.Save("PendingBufUsed", &x.PendingBufUsed)
	m.Save("PendingBufSize", &x.PendingBufSize)
}

func (x *TCPReceiverState) afterLoad() {}
func (x *TCPReceiverState) load(m state.Map) {
	m.Load("RcvNxt", &x.RcvNxt)
	m.Load("RcvAcc", &x.RcvAcc)
	m.Load("RcvWndScale", &x.RcvWndScale)
	m.Load("PendingBufUsed", &x.PendingBufUsed)
	m.Load("PendingBufSize", &x.PendingBufSize)
}

func (x *TCPSenderState) beforeSave() {}
func (x *TCPSenderState) save(m state.Map) {
	x.beforeSave()
	m.Save("LastSendTime", &x.LastSendTime)
	m.Save("DupAckCount", &x.DupAckCount)
	m.Save("SndCwnd", &x.SndCwnd)
	m.Save("Ssthresh", &x.Ssthresh)
	m.Save("SndCAAckCount", &x.SndCAAckCount)
	m.Save("Outstanding", &x.Outstanding)
	m.Save("SndWnd", &x.SndWnd)
	m.Save("SndUna", &x.SndUna)
	m.Save("SndNxt", &x.SndNxt)
	m.Save("RTTMeasureSeqNum", &x.RTTMeasureSeqNum)
	m.Save("RTTMeasureTime", &x.RTTMeasureTime)
	m.Save("Closed", &x.Closed)
	m.Save("SRTT", &x.SRTT)
	m.Save("RTO", &x.RTO)
	m.Save("RTTVar", &x.RTTVar)
	m.Save("SRTTInited", &x.SRTTInited)
	m.Save("MaxPayloadSize", &x.MaxPayloadSize)
	m.Save("SndWndScale", &x.SndWndScale)
	m.Save("MaxSentAck", &x.MaxSentAck)
	m.Save("FastRecovery", &x.FastRecovery)
}

func (x *TCPSenderState) afterLoad() {}
func (x *TCPSenderState) load(m state.Map) {
	m.Load("LastSendTime", &x.LastSendTime)
	m.Load("DupAckCount", &x.DupAckCount)
	m.Load("SndCwnd", &x.SndCwnd)
	m.Load("Ssthresh", &x.Ssthresh)
	m.Load("SndCAAckCount", &x.SndCAAckCount)
	m.Load("Outstanding", &x.Outstanding)
	m.Load("SndWnd", &x.SndWnd)
	m.Load("SndUna", &x.SndUna)
	m.Load("SndNxt", &x.SndNxt)
	m.Load("RTTMeasureSeqNum", &x.RTTMeasureSeqNum)
	m.Load("RTTMeasureTime", &x.RTTMeasureTime)
	m.Load("Closed", &x.Closed)
	m.Load("SRTT", &x.SRTT)
	m.Load("RTO", &x.RTO)
	m.Load("RTTVar", &x.RTTVar)
	m.Load("SRTTInited", &x.SRTTInited)
	m.Load("MaxPayloadSize", &x.MaxPayloadSize)
	m.Load("SndWndScale", &x.SndWndScale)
	m.Load("MaxSentAck", &x.MaxSentAck)
	m.Load("FastRecovery", &x.FastRecovery)
}

func (x *TCPSACKInfo) beforeSave() {}
func (x *TCPSACKInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Blocks", &x.Blocks)
}

func (x *TCPSACKInfo) afterLoad() {}
func (x *TCPSACKInfo) load(m state.Map) {
	m.Load("Blocks", &x.Blocks)
}

func (x *TCPEndpointState) beforeSave() {}
func (x *TCPEndpointState) save(m state.Map) {
	x.beforeSave()
	m.Save("ID", &x.ID)
	m.Save("SegTime", &x.SegTime)
	m.Save("RcvBufSize", &x.RcvBufSize)
	m.Save("RcvBufUsed", &x.RcvBufUsed)
	m.Save("RcvClosed", &x.RcvClosed)
	m.Save("SendTSOk", &x.SendTSOk)
	m.Save("RecentTS", &x.RecentTS)
	m.Save("TSOffset", &x.TSOffset)
	m.Save("SACKPermitted", &x.SACKPermitted)
	m.Save("SACK", &x.SACK)
	m.Save("SndBufSize", &x.SndBufSize)
	m.Save("SndBufUsed", &x.SndBufUsed)
	m.Save("SndClosed", &x.SndClosed)
	m.Save("SndBufInQueue", &x.SndBufInQueue)
	m.Save("PacketTooBigCount", &x.PacketTooBigCount)
	m.Save("SndMTU", &x.SndMTU)
	m.Save("Receiver", &x.Receiver)
	m.Save("Sender", &x.Sender)
}

func (x *TCPEndpointState) afterLoad() {}
func (x *TCPEndpointState) load(m state.Map) {
	m.Load("ID", &x.ID)
	m.Load("SegTime", &x.SegTime)
	m.Load("RcvBufSize", &x.RcvBufSize)
	m.Load("RcvBufUsed", &x.RcvBufUsed)
	m.Load("RcvClosed", &x.RcvClosed)
	m.Load("SendTSOk", &x.SendTSOk)
	m.Load("RecentTS", &x.RecentTS)
	m.Load("TSOffset", &x.TSOffset)
	m.Load("SACKPermitted", &x.SACKPermitted)
	m.Load("SACK", &x.SACK)
	m.Load("SndBufSize", &x.SndBufSize)
	m.Load("SndBufUsed", &x.SndBufUsed)
	m.Load("SndClosed", &x.SndClosed)
	m.Load("SndBufInQueue", &x.SndBufInQueue)
	m.Load("PacketTooBigCount", &x.PacketTooBigCount)
	m.Load("SndMTU", &x.SndMTU)
	m.Load("Receiver", &x.Receiver)
	m.Load("Sender", &x.Sender)
}

func (x *Stack) beforeSave() {}
func (x *Stack) save(m state.Map) {
	x.beforeSave()
	m.Save("transportProtocols", &x.transportProtocols)
	m.Save("networkProtocols", &x.networkProtocols)
	m.Save("linkAddrResolvers", &x.linkAddrResolvers)
	m.Save("demux", &x.demux)
	m.Save("stats", &x.stats)
	m.Save("linkAddrCache", &x.linkAddrCache)
	m.Save("mu", &x.mu)
	m.Save("nics", &x.nics)
	m.Save("routeTable", &x.routeTable)
	m.Save("PortManager", &x.PortManager)
	m.Save("tcpProbeFunc", &x.tcpProbeFunc)
}

func (x *Stack) afterLoad() {}
func (x *Stack) load(m state.Map) {
	m.Load("transportProtocols", &x.transportProtocols)
	m.Load("networkProtocols", &x.networkProtocols)
	m.Load("linkAddrResolvers", &x.linkAddrResolvers)
	m.Load("demux", &x.demux)
	m.Load("stats", &x.stats)
	m.Load("linkAddrCache", &x.linkAddrCache)
	m.Load("mu", &x.mu)
	m.Load("nics", &x.nics)
	m.Load("routeTable", &x.routeTable)
	m.Load("PortManager", &x.PortManager)
	m.Load("tcpProbeFunc", &x.tcpProbeFunc)
}

func (x *NICInfo) beforeSave() {}
func (x *NICInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Name", &x.Name)
	m.Save("LinkAddress", &x.LinkAddress)
	m.Save("ProtocolAddresses", &x.ProtocolAddresses)
}

func (x *NICInfo) afterLoad() {}
func (x *NICInfo) load(m state.Map) {
	m.Load("Name", &x.Name)
	m.Load("LinkAddress", &x.LinkAddress)
	m.Load("ProtocolAddresses", &x.ProtocolAddresses)
}

func init() {
	state.Register("stack.NetworkEndpointID", (*NetworkEndpointID)(nil), state.Fns{Save: (*NetworkEndpointID).save, Load: (*NetworkEndpointID).load})
	state.Register("stack.TransportEndpointID", (*TransportEndpointID)(nil), state.Fns{Save: (*TransportEndpointID).save, Load: (*TransportEndpointID).load})
	state.Register("stack.ControlType", (*ControlType)(nil), state.Fns{Save: (*ControlType).save, Load: (*ControlType).load})
	state.Register("stack.LinkEndpointCapabilities", (*LinkEndpointCapabilities)(nil), state.Fns{Save: (*LinkEndpointCapabilities).save, Load: (*LinkEndpointCapabilities).load})
	state.Register("stack.transportProtocolState", (*transportProtocolState)(nil), state.Fns{Save: (*transportProtocolState).save, Load: (*transportProtocolState).load})
	state.Register("stack.TCPEndpointID", (*TCPEndpointID)(nil), state.Fns{Save: (*TCPEndpointID).save, Load: (*TCPEndpointID).load})
	state.Register("stack.TCPFastRecoveryState", (*TCPFastRecoveryState)(nil), state.Fns{Save: (*TCPFastRecoveryState).save, Load: (*TCPFastRecoveryState).load})
	state.Register("stack.TCPReceiverState", (*TCPReceiverState)(nil), state.Fns{Save: (*TCPReceiverState).save, Load: (*TCPReceiverState).load})
	state.Register("stack.TCPSenderState", (*TCPSenderState)(nil), state.Fns{Save: (*TCPSenderState).save, Load: (*TCPSenderState).load})
	state.Register("stack.TCPSACKInfo", (*TCPSACKInfo)(nil), state.Fns{Save: (*TCPSACKInfo).save, Load: (*TCPSACKInfo).load})
	state.Register("stack.TCPEndpointState", (*TCPEndpointState)(nil), state.Fns{Save: (*TCPEndpointState).save, Load: (*TCPEndpointState).load})
	state.Register("stack.Stack", (*Stack)(nil), state.Fns{Save: (*Stack).save, Load: (*Stack).load})
	state.Register("stack.NICInfo", (*NICInfo)(nil), state.Fns{Save: (*NICInfo).save, Load: (*NICInfo).load})
}
