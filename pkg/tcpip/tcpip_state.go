// automatically generated by stateify.

package tcpip

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *Error) beforeSave() {}
func (x *Error) save(m state.Map) {
	x.beforeSave()
	m.Save("string", &x.string)
}

func (x *Error) afterLoad() {}
func (x *Error) load(m state.Map) {
	m.Load("string", &x.string)
}

func (x *StdClock) beforeSave() {}
func (x *StdClock) save(m state.Map) {
	x.beforeSave()
}

func (x *StdClock) afterLoad() {}
func (x *StdClock) load(m state.Map) {
}

func (x *Address) save(m state.Map) {
	m.SaveValue("", (string)(*x))
}

func (x *Address) load(m state.Map) {
	m.LoadValue("", new(string), func(y interface{}) { *x = (Address)(y.(string)) })
}

func (x *AddressMask) save(m state.Map) {
	m.SaveValue("", (string)(*x))
}

func (x *AddressMask) load(m state.Map) {
	m.LoadValue("", new(string), func(y interface{}) { *x = (AddressMask)(y.(string)) })
}

func (x *Subnet) beforeSave() {}
func (x *Subnet) save(m state.Map) {
	x.beforeSave()
	m.Save("address", &x.address)
	m.Save("mask", &x.mask)
}

func (x *Subnet) afterLoad() {}
func (x *Subnet) load(m state.Map) {
	m.Load("address", &x.address)
	m.Load("mask", &x.mask)
}

func (x *NICID) save(m state.Map) {
	m.SaveValue("", (int32)(*x))
}

func (x *NICID) load(m state.Map) {
	m.LoadValue("", new(int32), func(y interface{}) { *x = (NICID)(y.(int32)) })
}

func (x *ShutdownFlags) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *ShutdownFlags) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (ShutdownFlags)(y.(int)) })
}

func (x *FullAddress) beforeSave() {}
func (x *FullAddress) save(m state.Map) {
	x.beforeSave()
	m.Save("NIC", &x.NIC)
	m.Save("Addr", &x.Addr)
	m.Save("Port", &x.Port)
}

func (x *FullAddress) afterLoad() {}
func (x *FullAddress) load(m state.Map) {
	m.Load("NIC", &x.NIC)
	m.Load("Addr", &x.Addr)
	m.Load("Port", &x.Port)
}

func (x *SlicePayload) save(m state.Map) {
	m.SaveValue("", ([]byte)(*x))
}

func (x *SlicePayload) load(m state.Map) {
	m.LoadValue("", new([]byte), func(y interface{}) { *x = (SlicePayload)(y.([]byte)) })
}

func (x *ControlMessages) beforeSave() {}
func (x *ControlMessages) save(m state.Map) {
	x.beforeSave()
	m.Save("HasTimestamp", &x.HasTimestamp)
	m.Save("Timestamp", &x.Timestamp)
}

func (x *ControlMessages) afterLoad() {}
func (x *ControlMessages) load(m state.Map) {
	m.Load("HasTimestamp", &x.HasTimestamp)
	m.Load("Timestamp", &x.Timestamp)
}

func (x *WriteOptions) beforeSave() {}
func (x *WriteOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("To", &x.To)
	m.Save("More", &x.More)
	m.Save("EndOfRecord", &x.EndOfRecord)
}

func (x *WriteOptions) afterLoad() {}
func (x *WriteOptions) load(m state.Map) {
	m.Load("To", &x.To)
	m.Load("More", &x.More)
	m.Load("EndOfRecord", &x.EndOfRecord)
}

func (x *ErrorOption) beforeSave() {}
func (x *ErrorOption) save(m state.Map) {
	x.beforeSave()
}

func (x *ErrorOption) afterLoad() {}
func (x *ErrorOption) load(m state.Map) {
}

func (x *SendBufferSizeOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *SendBufferSizeOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (SendBufferSizeOption)(y.(int)) })
}

func (x *ReceiveBufferSizeOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *ReceiveBufferSizeOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (ReceiveBufferSizeOption)(y.(int)) })
}

func (x *SendQueueSizeOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *SendQueueSizeOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (SendQueueSizeOption)(y.(int)) })
}

func (x *ReceiveQueueSizeOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *ReceiveQueueSizeOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (ReceiveQueueSizeOption)(y.(int)) })
}

func (x *V6OnlyOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *V6OnlyOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (V6OnlyOption)(y.(int)) })
}

func (x *NoDelayOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *NoDelayOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (NoDelayOption)(y.(int)) })
}

func (x *ReuseAddressOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *ReuseAddressOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (ReuseAddressOption)(y.(int)) })
}

func (x *PasscredOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *PasscredOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (PasscredOption)(y.(int)) })
}

func (x *TimestampOption) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *TimestampOption) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (TimestampOption)(y.(int)) })
}

func (x *TCPInfoOption) beforeSave() {}
func (x *TCPInfoOption) save(m state.Map) {
	x.beforeSave()
}

func (x *TCPInfoOption) afterLoad() {}
func (x *TCPInfoOption) load(m state.Map) {
}

func (x *Route) beforeSave() {}
func (x *Route) save(m state.Map) {
	x.beforeSave()
	m.Save("Destination", &x.Destination)
	m.Save("Mask", &x.Mask)
	m.Save("Gateway", &x.Gateway)
	m.Save("NIC", &x.NIC)
}

func (x *Route) afterLoad() {}
func (x *Route) load(m state.Map) {
	m.Load("Destination", &x.Destination)
	m.Load("Mask", &x.Mask)
	m.Load("Gateway", &x.Gateway)
	m.Load("NIC", &x.NIC)
}

func (x *LinkEndpointID) save(m state.Map) {
	m.SaveValue("", (uint64)(*x))
}

func (x *LinkEndpointID) load(m state.Map) {
	m.LoadValue("", new(uint64), func(y interface{}) { *x = (LinkEndpointID)(y.(uint64)) })
}

func (x *TransportProtocolNumber) save(m state.Map) {
	m.SaveValue("", (uint32)(*x))
}

func (x *TransportProtocolNumber) load(m state.Map) {
	m.LoadValue("", new(uint32), func(y interface{}) { *x = (TransportProtocolNumber)(y.(uint32)) })
}

func (x *NetworkProtocolNumber) save(m state.Map) {
	m.SaveValue("", (uint32)(*x))
}

func (x *NetworkProtocolNumber) load(m state.Map) {
	m.LoadValue("", new(uint32), func(y interface{}) { *x = (NetworkProtocolNumber)(y.(uint32)) })
}

func (x *Stats) beforeSave() {}
func (x *Stats) save(m state.Map) {
	x.beforeSave()
	m.Save("UnknownProtocolRcvdPackets", &x.UnknownProtocolRcvdPackets)
	m.Save("UnknownNetworkEndpointRcvdPackets", &x.UnknownNetworkEndpointRcvdPackets)
	m.Save("MalformedRcvdPackets", &x.MalformedRcvdPackets)
	m.Save("DroppedPackets", &x.DroppedPackets)
}

func (x *Stats) afterLoad() {}
func (x *Stats) load(m state.Map) {
	m.Load("UnknownProtocolRcvdPackets", &x.UnknownProtocolRcvdPackets)
	m.Load("UnknownNetworkEndpointRcvdPackets", &x.UnknownNetworkEndpointRcvdPackets)
	m.Load("MalformedRcvdPackets", &x.MalformedRcvdPackets)
	m.Load("DroppedPackets", &x.DroppedPackets)
}

func (x *LinkAddress) save(m state.Map) {
	m.SaveValue("", (string)(*x))
}

func (x *LinkAddress) load(m state.Map) {
	m.LoadValue("", new(string), func(y interface{}) { *x = (LinkAddress)(y.(string)) })
}

func (x *ProtocolAddress) beforeSave() {}
func (x *ProtocolAddress) save(m state.Map) {
	x.beforeSave()
	m.Save("Protocol", &x.Protocol)
	m.Save("Address", &x.Address)
}

func (x *ProtocolAddress) afterLoad() {}
func (x *ProtocolAddress) load(m state.Map) {
	m.Load("Protocol", &x.Protocol)
	m.Load("Address", &x.Address)
}

func init() {
	state.Register("tcpip.Error", (*Error)(nil), state.Fns{Save: (*Error).save, Load: (*Error).load})
	state.Register("tcpip.StdClock", (*StdClock)(nil), state.Fns{Save: (*StdClock).save, Load: (*StdClock).load})
	state.Register("tcpip.Address", (*Address)(nil), state.Fns{Save: (*Address).save, Load: (*Address).load})
	state.Register("tcpip.AddressMask", (*AddressMask)(nil), state.Fns{Save: (*AddressMask).save, Load: (*AddressMask).load})
	state.Register("tcpip.Subnet", (*Subnet)(nil), state.Fns{Save: (*Subnet).save, Load: (*Subnet).load})
	state.Register("tcpip.NICID", (*NICID)(nil), state.Fns{Save: (*NICID).save, Load: (*NICID).load})
	state.Register("tcpip.ShutdownFlags", (*ShutdownFlags)(nil), state.Fns{Save: (*ShutdownFlags).save, Load: (*ShutdownFlags).load})
	state.Register("tcpip.FullAddress", (*FullAddress)(nil), state.Fns{Save: (*FullAddress).save, Load: (*FullAddress).load})
	state.Register("tcpip.SlicePayload", (*SlicePayload)(nil), state.Fns{Save: (*SlicePayload).save, Load: (*SlicePayload).load})
	state.Register("tcpip.ControlMessages", (*ControlMessages)(nil), state.Fns{Save: (*ControlMessages).save, Load: (*ControlMessages).load})
	state.Register("tcpip.WriteOptions", (*WriteOptions)(nil), state.Fns{Save: (*WriteOptions).save, Load: (*WriteOptions).load})
	state.Register("tcpip.ErrorOption", (*ErrorOption)(nil), state.Fns{Save: (*ErrorOption).save, Load: (*ErrorOption).load})
	state.Register("tcpip.SendBufferSizeOption", (*SendBufferSizeOption)(nil), state.Fns{Save: (*SendBufferSizeOption).save, Load: (*SendBufferSizeOption).load})
	state.Register("tcpip.ReceiveBufferSizeOption", (*ReceiveBufferSizeOption)(nil), state.Fns{Save: (*ReceiveBufferSizeOption).save, Load: (*ReceiveBufferSizeOption).load})
	state.Register("tcpip.SendQueueSizeOption", (*SendQueueSizeOption)(nil), state.Fns{Save: (*SendQueueSizeOption).save, Load: (*SendQueueSizeOption).load})
	state.Register("tcpip.ReceiveQueueSizeOption", (*ReceiveQueueSizeOption)(nil), state.Fns{Save: (*ReceiveQueueSizeOption).save, Load: (*ReceiveQueueSizeOption).load})
	state.Register("tcpip.V6OnlyOption", (*V6OnlyOption)(nil), state.Fns{Save: (*V6OnlyOption).save, Load: (*V6OnlyOption).load})
	state.Register("tcpip.NoDelayOption", (*NoDelayOption)(nil), state.Fns{Save: (*NoDelayOption).save, Load: (*NoDelayOption).load})
	state.Register("tcpip.ReuseAddressOption", (*ReuseAddressOption)(nil), state.Fns{Save: (*ReuseAddressOption).save, Load: (*ReuseAddressOption).load})
	state.Register("tcpip.PasscredOption", (*PasscredOption)(nil), state.Fns{Save: (*PasscredOption).save, Load: (*PasscredOption).load})
	state.Register("tcpip.TimestampOption", (*TimestampOption)(nil), state.Fns{Save: (*TimestampOption).save, Load: (*TimestampOption).load})
	state.Register("tcpip.TCPInfoOption", (*TCPInfoOption)(nil), state.Fns{Save: (*TCPInfoOption).save, Load: (*TCPInfoOption).load})
	state.Register("tcpip.Route", (*Route)(nil), state.Fns{Save: (*Route).save, Load: (*Route).load})
	state.Register("tcpip.LinkEndpointID", (*LinkEndpointID)(nil), state.Fns{Save: (*LinkEndpointID).save, Load: (*LinkEndpointID).load})
	state.Register("tcpip.TransportProtocolNumber", (*TransportProtocolNumber)(nil), state.Fns{Save: (*TransportProtocolNumber).save, Load: (*TransportProtocolNumber).load})
	state.Register("tcpip.NetworkProtocolNumber", (*NetworkProtocolNumber)(nil), state.Fns{Save: (*NetworkProtocolNumber).save, Load: (*NetworkProtocolNumber).load})
	state.Register("tcpip.Stats", (*Stats)(nil), state.Fns{Save: (*Stats).save, Load: (*Stats).load})
	state.Register("tcpip.LinkAddress", (*LinkAddress)(nil), state.Fns{Save: (*LinkAddress).save, Load: (*LinkAddress).load})
	state.Register("tcpip.ProtocolAddress", (*ProtocolAddress)(nil), state.Fns{Save: (*ProtocolAddress).save, Load: (*ProtocolAddress).load})
}
