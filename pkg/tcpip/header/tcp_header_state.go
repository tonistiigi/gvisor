// automatically generated by stateify.

package header

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *TCPFields) beforeSave() {}
func (x *TCPFields) save(m state.Map) {
	x.beforeSave()
	m.Save("SrcPort", &x.SrcPort)
	m.Save("DstPort", &x.DstPort)
	m.Save("SeqNum", &x.SeqNum)
	m.Save("AckNum", &x.AckNum)
	m.Save("DataOffset", &x.DataOffset)
	m.Save("Flags", &x.Flags)
	m.Save("WindowSize", &x.WindowSize)
	m.Save("Checksum", &x.Checksum)
	m.Save("UrgentPointer", &x.UrgentPointer)
}

func (x *TCPFields) afterLoad() {}
func (x *TCPFields) load(m state.Map) {
	m.Load("SrcPort", &x.SrcPort)
	m.Load("DstPort", &x.DstPort)
	m.Load("SeqNum", &x.SeqNum)
	m.Load("AckNum", &x.AckNum)
	m.Load("DataOffset", &x.DataOffset)
	m.Load("Flags", &x.Flags)
	m.Load("WindowSize", &x.WindowSize)
	m.Load("Checksum", &x.Checksum)
	m.Load("UrgentPointer", &x.UrgentPointer)
}

func (x *TCPSynOptions) beforeSave() {}
func (x *TCPSynOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("MSS", &x.MSS)
	m.Save("WS", &x.WS)
	m.Save("TS", &x.TS)
	m.Save("TSVal", &x.TSVal)
	m.Save("TSEcr", &x.TSEcr)
	m.Save("SACKPermitted", &x.SACKPermitted)
}

func (x *TCPSynOptions) afterLoad() {}
func (x *TCPSynOptions) load(m state.Map) {
	m.Load("MSS", &x.MSS)
	m.Load("WS", &x.WS)
	m.Load("TS", &x.TS)
	m.Load("TSVal", &x.TSVal)
	m.Load("TSEcr", &x.TSEcr)
	m.Load("SACKPermitted", &x.SACKPermitted)
}

func (x *SACKBlock) beforeSave() {}
func (x *SACKBlock) save(m state.Map) {
	x.beforeSave()
	m.Save("Start", &x.Start)
	m.Save("End", &x.End)
}

func (x *SACKBlock) afterLoad() {}
func (x *SACKBlock) load(m state.Map) {
	m.Load("Start", &x.Start)
	m.Load("End", &x.End)
}

func (x *TCPOptions) beforeSave() {}
func (x *TCPOptions) save(m state.Map) {
	x.beforeSave()
	m.Save("TS", &x.TS)
	m.Save("TSVal", &x.TSVal)
	m.Save("TSEcr", &x.TSEcr)
	m.Save("SACKBlocks", &x.SACKBlocks)
}

func (x *TCPOptions) afterLoad() {}
func (x *TCPOptions) load(m state.Map) {
	m.Load("TS", &x.TS)
	m.Load("TSVal", &x.TSVal)
	m.Load("TSEcr", &x.TSEcr)
	m.Load("SACKBlocks", &x.SACKBlocks)
}

func (x *TCP) save(m state.Map) {
	m.SaveValue("", ([]byte)(*x))
}

func (x *TCP) load(m state.Map) {
	m.LoadValue("", new([]byte), func(y interface{}) { *x = (TCP)(y.([]byte)) })
}

func init() {
	state.Register("header.TCPFields", (*TCPFields)(nil), state.Fns{Save: (*TCPFields).save, Load: (*TCPFields).load})
	state.Register("header.TCPSynOptions", (*TCPSynOptions)(nil), state.Fns{Save: (*TCPSynOptions).save, Load: (*TCPSynOptions).load})
	state.Register("header.SACKBlock", (*SACKBlock)(nil), state.Fns{Save: (*SACKBlock).save, Load: (*SACKBlock).load})
	state.Register("header.TCPOptions", (*TCPOptions)(nil), state.Fns{Save: (*TCPOptions).save, Load: (*TCPOptions).load})
	state.Register("header.TCP", (*TCP)(nil), state.Fns{Save: (*TCP).save, Load: (*TCP).load})
}
