// automatically generated by stateify.

package bpf

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *Error) beforeSave() {}
func (x *Error) save(m state.Map) {
	x.beforeSave()
	m.Save("Code", &x.Code)
	m.Save("PC", &x.PC)
}

func (x *Error) afterLoad() {}
func (x *Error) load(m state.Map) {
	m.Load("Code", &x.Code)
	m.Load("PC", &x.PC)
}

func (x *Program) beforeSave() {}
func (x *Program) save(m state.Map) {
	x.beforeSave()
	m.Save("instructions", &x.instructions)
}

func (x *Program) afterLoad() {}
func (x *Program) load(m state.Map) {
	m.Load("instructions", &x.instructions)
}

func (x *machine) beforeSave() {}
func (x *machine) save(m state.Map) {
	x.beforeSave()
	m.Save("A", &x.A)
	m.Save("X", &x.X)
	m.Save("M", &x.M)
}

func (x *machine) afterLoad() {}
func (x *machine) load(m state.Map) {
	m.Load("A", &x.A)
	m.Load("X", &x.X)
	m.Load("M", &x.M)
}

func init() {
	state.Register("bpf.Error", (*Error)(nil), state.Fns{Save: (*Error).save, Load: (*Error).load})
	state.Register("bpf.Program", (*Program)(nil), state.Fns{Save: (*Program).save, Load: (*Program).load})
	state.Register("bpf.machine", (*machine)(nil), state.Fns{Save: (*machine).save, Load: (*machine).load})
}
