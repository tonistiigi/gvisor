// automatically generated by stateify.

package refs

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *WeakRef) beforeSave() {}
func (x *WeakRef) save(m state.Map) {
	x.beforeSave()
	var obj savedReference = x.saveObj()
	m.SaveValue("obj", obj)
	m.Save("user", &x.user)
}

func (x *WeakRef) afterLoad() {}
func (x *WeakRef) load(m state.Map) {
	m.Load("user", &x.user)
	m.LoadValue("obj", new(savedReference), func(y interface{}) { x.loadObj(y.(savedReference)) })
}

func (x *AtomicRefCount) beforeSave() {}
func (x *AtomicRefCount) save(m state.Map) {
	x.beforeSave()
	m.Save("refCount", &x.refCount)
}

func (x *AtomicRefCount) afterLoad() {}
func (x *AtomicRefCount) load(m state.Map) {
	m.Load("refCount", &x.refCount)
}

func (x *savedReference) beforeSave() {}
func (x *savedReference) save(m state.Map) {
	x.beforeSave()
	m.Save("obj", &x.obj)
}

func (x *savedReference) afterLoad() {}
func (x *savedReference) load(m state.Map) {
	m.Load("obj", &x.obj)
}

func init() {
	state.Register("refs.WeakRef", (*WeakRef)(nil), state.Fns{Save: (*WeakRef).save, Load: (*WeakRef).load})
	state.Register("refs.AtomicRefCount", (*AtomicRefCount)(nil), state.Fns{Save: (*AtomicRefCount).save, Load: (*AtomicRefCount).load})
	state.Register("refs.savedReference", (*savedReference)(nil), state.Fns{Save: (*savedReference).save, Load: (*savedReference).load})
}
