// automatically generated by stateify.

package linux

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *BinderVersion) beforeSave() {}
func (x *BinderVersion) save(m state.Map) {
	x.beforeSave()
	m.Save("ProtocolVersion", &x.ProtocolVersion)
}

func (x *BinderVersion) afterLoad() {}
func (x *BinderVersion) load(m state.Map) {
	m.Load("ProtocolVersion", &x.ProtocolVersion)
}

func (x *BPFInstruction) beforeSave() {}
func (x *BPFInstruction) save(m state.Map) {
	x.beforeSave()
	m.Save("OpCode", &x.OpCode)
	m.Save("JumpIfTrue", &x.JumpIfTrue)
	m.Save("JumpIfFalse", &x.JumpIfFalse)
	m.Save("K", &x.K)
}

func (x *BPFInstruction) afterLoad() {}
func (x *BPFInstruction) load(m state.Map) {
	m.Load("OpCode", &x.OpCode)
	m.Load("JumpIfTrue", &x.JumpIfTrue)
	m.Load("JumpIfFalse", &x.JumpIfFalse)
	m.Load("K", &x.K)
}

func (x *TimeT) save(m state.Map) {
	m.SaveValue("", (int64)(*x))
}

func (x *TimeT) load(m state.Map) {
	m.LoadValue("", new(int64), func(y interface{}) { *x = (TimeT)(y.(int64)) })
}

func (x *Timespec) beforeSave() {}
func (x *Timespec) save(m state.Map) {
	x.beforeSave()
	m.Save("Sec", &x.Sec)
	m.Save("Nsec", &x.Nsec)
}

func (x *Timespec) afterLoad() {}
func (x *Timespec) load(m state.Map) {
	m.Load("Sec", &x.Sec)
	m.Load("Nsec", &x.Nsec)
}

func (x *Timeval) beforeSave() {}
func (x *Timeval) save(m state.Map) {
	x.beforeSave()
	m.Save("Sec", &x.Sec)
	m.Save("Usec", &x.Usec)
}

func (x *Timeval) afterLoad() {}
func (x *Timeval) load(m state.Map) {
	m.Load("Sec", &x.Sec)
	m.Load("Usec", &x.Usec)
}

func (x *Itimerspec) beforeSave() {}
func (x *Itimerspec) save(m state.Map) {
	x.beforeSave()
	m.Save("Interval", &x.Interval)
	m.Save("Value", &x.Value)
}

func (x *Itimerspec) afterLoad() {}
func (x *Itimerspec) load(m state.Map) {
	m.Load("Interval", &x.Interval)
	m.Load("Value", &x.Value)
}

func (x *ItimerVal) beforeSave() {}
func (x *ItimerVal) save(m state.Map) {
	x.beforeSave()
	m.Save("Interval", &x.Interval)
	m.Save("Value", &x.Value)
}

func (x *ItimerVal) afterLoad() {}
func (x *ItimerVal) load(m state.Map) {
	m.Load("Interval", &x.Interval)
	m.Load("Value", &x.Value)
}

func (x *ClockT) save(m state.Map) {
	m.SaveValue("", (int64)(*x))
}

func (x *ClockT) load(m state.Map) {
	m.LoadValue("", new(int64), func(y interface{}) { *x = (ClockT)(y.(int64)) })
}

func (x *Tms) beforeSave() {}
func (x *Tms) save(m state.Map) {
	x.beforeSave()
	m.Save("UTime", &x.UTime)
	m.Save("STime", &x.STime)
	m.Save("CUTime", &x.CUTime)
	m.Save("CSTime", &x.CSTime)
}

func (x *Tms) afterLoad() {}
func (x *Tms) load(m state.Map) {
	m.Load("UTime", &x.UTime)
	m.Load("STime", &x.STime)
	m.Load("CUTime", &x.CUTime)
	m.Load("CSTime", &x.CSTime)
}

func (x *Termios) beforeSave() {}
func (x *Termios) save(m state.Map) {
	x.beforeSave()
	m.Save("InputFlags", &x.InputFlags)
	m.Save("OutputFlags", &x.OutputFlags)
	m.Save("ControlFlags", &x.ControlFlags)
	m.Save("LocalFlags", &x.LocalFlags)
	m.Save("LineDiscipline", &x.LineDiscipline)
	m.Save("ControlCharacters", &x.ControlCharacters)
}

func (x *Termios) afterLoad() {}
func (x *Termios) load(m state.Map) {
	m.Load("InputFlags", &x.InputFlags)
	m.Load("OutputFlags", &x.OutputFlags)
	m.Load("ControlFlags", &x.ControlFlags)
	m.Load("LocalFlags", &x.LocalFlags)
	m.Load("LineDiscipline", &x.LineDiscipline)
	m.Load("ControlCharacters", &x.ControlCharacters)
}

func (x *KernelTermios) beforeSave() {}
func (x *KernelTermios) save(m state.Map) {
	x.beforeSave()
	m.Save("InputFlags", &x.InputFlags)
	m.Save("OutputFlags", &x.OutputFlags)
	m.Save("ControlFlags", &x.ControlFlags)
	m.Save("LocalFlags", &x.LocalFlags)
	m.Save("LineDiscipline", &x.LineDiscipline)
	m.Save("ControlCharacters", &x.ControlCharacters)
	m.Save("InputSpeed", &x.InputSpeed)
	m.Save("OutputSpeed", &x.OutputSpeed)
}

func (x *KernelTermios) afterLoad() {}
func (x *KernelTermios) load(m state.Map) {
	m.Load("InputFlags", &x.InputFlags)
	m.Load("OutputFlags", &x.OutputFlags)
	m.Load("ControlFlags", &x.ControlFlags)
	m.Load("LocalFlags", &x.LocalFlags)
	m.Load("LineDiscipline", &x.LineDiscipline)
	m.Load("ControlCharacters", &x.ControlCharacters)
	m.Load("InputSpeed", &x.InputSpeed)
	m.Load("OutputSpeed", &x.OutputSpeed)
}

func init() {
	state.Register("linux.BinderVersion", (*BinderVersion)(nil), state.Fns{Save: (*BinderVersion).save, Load: (*BinderVersion).load})
	state.Register("linux.BPFInstruction", (*BPFInstruction)(nil), state.Fns{Save: (*BPFInstruction).save, Load: (*BPFInstruction).load})
	state.Register("linux.TimeT", (*TimeT)(nil), state.Fns{Save: (*TimeT).save, Load: (*TimeT).load})
	state.Register("linux.Timespec", (*Timespec)(nil), state.Fns{Save: (*Timespec).save, Load: (*Timespec).load})
	state.Register("linux.Timeval", (*Timeval)(nil), state.Fns{Save: (*Timeval).save, Load: (*Timeval).load})
	state.Register("linux.Itimerspec", (*Itimerspec)(nil), state.Fns{Save: (*Itimerspec).save, Load: (*Itimerspec).load})
	state.Register("linux.ItimerVal", (*ItimerVal)(nil), state.Fns{Save: (*ItimerVal).save, Load: (*ItimerVal).load})
	state.Register("linux.ClockT", (*ClockT)(nil), state.Fns{Save: (*ClockT).save, Load: (*ClockT).load})
	state.Register("linux.Tms", (*Tms)(nil), state.Fns{Save: (*Tms).save, Load: (*Tms).load})
	state.Register("linux.Termios", (*Termios)(nil), state.Fns{Save: (*Termios).save, Load: (*Termios).load})
	state.Register("linux.KernelTermios", (*KernelTermios)(nil), state.Fns{Save: (*KernelTermios).save, Load: (*KernelTermios).load})
}
