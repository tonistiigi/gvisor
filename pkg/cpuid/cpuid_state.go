// automatically generated by stateify.

package cpuid

import (
	"gvisor.googlesource.com/gvisor/pkg/state"
)

func (x *Feature) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *Feature) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (Feature)(y.(int)) })
}

func (x *block) save(m state.Map) {
	m.SaveValue("", (int)(*x))
}

func (x *block) load(m state.Map) {
	m.LoadValue("", new(int), func(y interface{}) { *x = (block)(y.(int)) })
}

func (x *cpuidFunction) save(m state.Map) {
	m.SaveValue("", (uint32)(*x))
}

func (x *cpuidFunction) load(m state.Map) {
	m.LoadValue("", new(uint32), func(y interface{}) { *x = (cpuidFunction)(y.(uint32)) })
}

func (x *FeatureSet) beforeSave() {}
func (x *FeatureSet) save(m state.Map) {
	x.beforeSave()
	m.Save("Set", &x.Set)
	m.Save("VendorID", &x.VendorID)
	m.Save("ExtendedFamily", &x.ExtendedFamily)
	m.Save("ExtendedModel", &x.ExtendedModel)
	m.Save("ProcessorType", &x.ProcessorType)
	m.Save("Family", &x.Family)
	m.Save("Model", &x.Model)
	m.Save("SteppingID", &x.SteppingID)
}

func (x *FeatureSet) afterLoad() {}
func (x *FeatureSet) load(m state.Map) {
	m.Load("Set", &x.Set)
	m.Load("VendorID", &x.VendorID)
	m.Load("ExtendedFamily", &x.ExtendedFamily)
	m.Load("ExtendedModel", &x.ExtendedModel)
	m.Load("ProcessorType", &x.ProcessorType)
	m.Load("Family", &x.Family)
	m.Load("Model", &x.Model)
	m.Load("SteppingID", &x.SteppingID)
}

func init() {
	state.Register("cpuid.Feature", (*Feature)(nil), state.Fns{Save: (*Feature).save, Load: (*Feature).load})
	state.Register("cpuid.block", (*block)(nil), state.Fns{Save: (*block).save, Load: (*block).load})
	state.Register("cpuid.cpuidFunction", (*cpuidFunction)(nil), state.Fns{Save: (*cpuidFunction).save, Load: (*cpuidFunction).load})
	state.Register("cpuid.FeatureSet", (*FeatureSet)(nil), state.Fns{Save: (*FeatureSet).save, Load: (*FeatureSet).load})
}
